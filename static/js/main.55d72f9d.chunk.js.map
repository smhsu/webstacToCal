{"version":3,"sources":["components/ErrorButton.tsx","CalendarApi.ts","components/AsyncButton.tsx","components/AuthPanel.tsx","components/ScheduleInput.tsx","Analytics.ts","Semester.ts","ValidationError.ts","EventInputModel.ts","CourseParser.ts","ExamParser.ts","components/EventTableOptions.tsx","components/EventTableRow.tsx","components/EventTable.tsx","components/App.tsx","index.tsx"],"names":["ErrorButton","props","button","this","initTooltip","prevProps","tooltip","$","onClick","className","ref","node","title","children","React","DISCOVERY_DOCS","CalendarApi","gapi","auth2","getAuthInstance","currentUser","get","isSignedIn","Promise","resolve","reject","signIn","then","_user","error","ApiHttpError","tryToConvert","signOut","client","calendar","calendarList","list","minAccessRole","response","result","items","calendarId","model","request","events","insert","resource","generateEventObject","success","htmlLink","instancePromise","Error","init","apiKey","process","clientId","scope","discoveryDocs","reason","statusCode","preface","Object","setPrototypeOf","prototype","name","obj","code","message","isGoogleErrorObject","status","AsyncButton","state","isLoading","isError","errorTooltip","buttonClicked","bind","setState","resolveValue","onPromiseResolved","catch","window","console","disabled","errorContent","defaultProps","AsyncButtonVoid","AuthPanel","onSignOutRequested","onAuthChangeComplete","onSignInRequested","ParseSuccessNotice","role","numEvents","parseFailedNotice","ScheduleInput","textareaClassName","parseNotice","value","numParsed","numEventsParsed","href","target","rel","placeholder","onChange","Analytics","isInitialized","ReactGA","anonymizeIp","path","args","semester","startDate","moment","endDate","isValid","isBefore","ValidationErrorReason","EventInputButtonState","ValidationError","DATE_FORMATS","TIME_FORMAT","RECURRANCE_DAY_STRINGS","TIME_ZONE","REMINDERS","overrides","useDefault","EventInputModel","location","date","startTime","endTime","isCourse","repeatingDays","Array","DAYS_PER_WEEK","fill","buttonState","normal","successUrl","isCustom","some","day","clone","dateDayOfWeek","isoWeekday","dayOffset","daysUntilNextRepeatingDay","add","generateStartEndTimes","startDateTime","endDateTime","summary","start","dateTime","timeZone","end","recurrence","generateRecurrence","description","reminders","getDate","DATE","utc","TIME","END_BEFORE_START","dateISOString","toISOString","substring","substr","getIsRepeating","REPEAT_REQUIRED","stringDays","i","length","push","endRepeat","format","join","afterDay","dayIndex","COURSE_REGEX","DAYS_AND_TIME_REGEX","columnIndices","daysAndTimeCaptureGroups","CourseParser","rawInput","fuzzyCourseMatches","match","eventModels","columns","split","daysAndTimeMatch","eventModel","trim","parseCourseDays","daysArray","charAt","EXAM_REGEX","RegExp","source","captureGroups","ExamParser","parsedCourses","courseToLocationMap","reduce","map","course","examMatch","exec","courseName","rawLocation","AsyncButtonCalendars","EventTableOptions","calendars","getIsLoggedIn","fetchCalendars","setCalendarList","calendarSelectChanged","nextProps","nextLoggedIn","calendarApi","getIsSignedIn","getCalendarList","newCalendars","changeEvent","onCalendarSelected","matchingCalendar","find","id","selectedCalendarValue","selectedCalendar","calendarOptions","inputSizes","RowButton","loading","undefined","onAddButtonPressed","EventTableRow","modelChangeCallback","onModelChangeRequested","trClassName","type","size","event","isRepeat","index","checked","newRepeatingDays","slice","checkboxCallback","EventTable","analytics","isAddingAll","addCustomEvent","updateOneEvent","validateOptions","addButtonPressed","addAllButtonPressed","addModelToCalendar","renderEventTableRows","customEvents","filter","newEvents","concat","newEvent","sendEvent","category","action","propsToChange","_","assign","NO_CALENDAR_SELECTED","PERMISSION_DENIED","getIsReadyToAdd","warn","createEvent","addAllButton","colSpan","App","courseParser","examParser","parsedEvents","isApiLoadError","rawInputSchedule","getInstance","api","authStatusChanged","inputScheduleChanged","sendPageView","parseCourses","parsedExams","parseExams","activeStep","stepClassName","activeStepClassName","authPanel","Frown","onload","appRootContainer","document","getElementById","ua","navigator","userAgent","msie","indexOf","trident","isInternetExplorer","alert","style","textAlign","display","ReactDOM"],"mappings":"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","file":"static/js/main.55d72f9d.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface ErrorButtonProps {\r\n    /**\r\n     * Tooltip for the button.\r\n     */\r\n    tooltip?: string;\r\n\r\n    /**\r\n     * Callback when button is clicked.\r\n     */\r\n    onClick?(): void;\r\n}\r\n\r\n/**\r\n * A nice, big, red error button, with optional tooltip.  Requires jQuery and Bootstrap JS in global scope for the\r\n * tooltip.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass ErrorButton extends React.Component<ErrorButtonProps, {}> {\r\n    private button: HTMLButtonElement | null;\r\n\r\n    constructor(props: ErrorButtonProps) {\r\n        super(props);\r\n        this.button = null;\r\n    }\r\n\r\n    /**\r\n     * Initializes the tooltip.\r\n     * \r\n     * @override\r\n     */\r\n    componentDidMount() {\r\n        this.initTooltip();\r\n    }\r\n\r\n    /**\r\n     * Reinitalizes the tooltip if it has changed.\r\n     * \r\n     * @param {ErrorButtonProps} prevProps - props that the component used to have\r\n     * @override\r\n     */\r\n    componentDidUpdate(prevProps: ErrorButtonProps) {\r\n        if (this.props.tooltip !== prevProps.tooltip) {\r\n            this.initTooltip();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.button) {\r\n            $(this.button).tooltip(\"dispose\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return {JSX.Element} the button\r\n     */\r\n    render(): JSX.Element {\r\n        return (\r\n        <button\r\n            onClick={this.props.onClick}\r\n            className=\"btn btn-danger\"\r\n            ref={(node) => this.button = node}\r\n            data-toggle={this.props.tooltip && \"tooltip\"}\r\n            data-placement={this.props.tooltip && \"top\"}\r\n            title={this.props.tooltip}\r\n        >\r\n            {/* fa-times looks like a big X. */}\r\n            <i className=\"fa fa-times\" aria-hidden=\"true\" />{this.props.children}\r\n        </button>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initializes the tooltip, if the button has been mounted and there is a tooltip.\r\n     */\r\n    private initTooltip(): void {\r\n        if (!this.button || !this.props.tooltip) {\r\n            return;\r\n        }\r\n        $(this.button).tooltip(); // Relies on both jQuery and Bootstrap JS in global scope\r\n    }\r\n}\r\n\r\nexport default ErrorButton;\r\n","import EventInputModel from \"./EventInputModel\";\r\n\r\nconst API_SCOPE = \"https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events\";\r\nconst DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\r\n// https://developers.google.com/identity/protocols/googlescopes#calendarv3\r\n// https://developers.google.com/api-client-library/javascript/reference/referencedocs\r\n// https://developers.google.com/google-apps/calendar/\r\n\r\n// Alias some names so we don't have to type so much ;)\r\ninterface RequestFulfilled<T> extends gapi.client.HttpRequestFulfilled<T> {}\r\ninterface CalendarList extends gapi.client.calendar.CalendarList {}\r\ninterface CalendarListEntry extends gapi.client.calendar.CalendarListEntry {}\r\n\r\n/**\r\n * A singleton wrapper around Google's calendar API.  This class is singleton because Google's API is in global scope,\r\n * and is wrapped because Google's promises are not exactly ES6-confomant.\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class CalendarApi {\r\n    private static instancePromise: Promise<CalendarApi> | null = null;\r\n\r\n    private constructor() {}\r\n\r\n    /**\r\n     * Returns a promise for the global instance of CalendarApi.  This function will also initialize the calendar API\r\n     * the first time it is called.\r\n     * \r\n     * @return {Promise<CalendarApi>} a promise for the instance\r\n     */\r\n    static getInstance(): Promise<CalendarApi> {\r\n        if (CalendarApi.instancePromise === null) {\r\n            // Init in this function because it is async, and constructors cannot be async.\r\n            if (process.env.REACT_APP_API_KEY === undefined || process.env.REACT_APP_OAUTH_CLIENT_ID === undefined) {\r\n                throw new Error(\"Required environment variables not set during build time.  Refer to README.md for \" +\r\n                  \"more details.\");\r\n            }\r\n            if (!gapi.client) { // Should be loaded in a <script> in the HTML\r\n                throw new Error(\"Google client library is required in global scope.  Be sure it has loaded and \" +\r\n                    \"executed completely.\");\r\n            }\r\n\r\n            CalendarApi.instancePromise = new Promise<CalendarApi>((resolve, reject) => {\r\n                gapi.client.init({\r\n                    apiKey: process.env.REACT_APP_API_KEY,\r\n                    clientId: process.env.REACT_APP_OAUTH_CLIENT_ID,\r\n                    scope: API_SCOPE,\r\n                    // discoveryDocs will augment gapi with additional calendar-related methods.\r\n                    discoveryDocs: DISCOVERY_DOCS,\r\n                }).then(\r\n                    () => resolve(new CalendarApi()),\r\n                    error => reject(ApiHttpError.tryToConvert(error) || error)\r\n                );\r\n            });\r\n        }\r\n        return CalendarApi.instancePromise;\r\n    }\r\n\r\n    /**\r\n     * @return {boolean} whether the current user is signed in\r\n     */\r\n    getIsSignedIn(): boolean {\r\n        return gapi.auth2.getAuthInstance()\r\n            .currentUser.get()\r\n            .isSignedIn();\r\n    }\r\n\r\n    /**\r\n     * Requests permission from the user to access their Google calendar.  Returns a promise that resolves when the user\r\n     * grants permission, and rejects if the user denies permission or some other error happens.\r\n     * \r\n     * @return {Promise<void>} a Promise that resolves when the user is signed in\r\n     */\r\n    signIn(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            gapi.auth2.getAuthInstance().signIn().then(\r\n                _user => resolve(),\r\n                (error: any) => reject(ApiHttpError.tryToConvert(error) || error) // tslint:disable-line:no-any\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ends the user's Google Calendar session, allowing another user to sign in.\r\n     * \r\n     * @return {Promise<void>} a Promise that resolves when the user is signed out\r\n     */\r\n    signOut(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            gapi.auth2.getAuthInstance().signOut().then(\r\n                resolve,\r\n                (error: any) => reject(ApiHttpError.tryToConvert(error) || error) // tslint:disable-line:no-any\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return {Promise<CalendarListEntry[]>} a Promise for the user's **editable** calendars\r\n     */\r\n    getCalendarList(): Promise<CalendarListEntry[]> {\r\n        return new Promise<RequestFulfilled<CalendarList>>((resolve, reject) => {\r\n            gapi.client.calendar.calendarList.list({minAccessRole: \"writer\"}).then(\r\n                resolve,\r\n                error => reject(ApiHttpError.tryToConvert(error) || error)\r\n            );\r\n        }).then(response => response.result.items);\r\n    }\r\n\r\n    /**\r\n     * Posts an event to the specified calendar.  Returns a Promise that resolves with a URL to the created event.\r\n     * \r\n     * @param {string} calendarId - the calendar to which to add the event\r\n     * @param {EventInputModel} model - object that can generate the event request object\r\n     * @return {Promise<string>} a Promise for the URL to the created event\r\n     */\r\n    createEvent(calendarId: string, model: EventInputModel): Promise<string> {\r\n        try {\r\n            let request = gapi.client.calendar.events.insert({\r\n                calendarId: calendarId,\r\n                resource: model.generateEventObject()\r\n            });\r\n\r\n            return new Promise<string>((resolve, reject) => {\r\n                request.then(\r\n                    success => resolve(success.result.htmlLink),\r\n                    error => reject(ApiHttpError.tryToConvert(error) || error)\r\n                );\r\n            });\r\n        } catch (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default CalendarApi;\r\n\r\n////////////////\r\n// API errors //\r\n////////////////\r\n\r\n/**\r\n * Google API throws these objects.  It loosely extends {@link gapi.client.HttpRequestRejected}.\r\n */\r\ninterface GoogleError {\r\n    result: {\r\n        error: {\r\n            code: number;\r\n            errors: object[] | undefined;\r\n            message: string;\r\n        }\r\n    };\r\n    body: string; // HTTP response body\r\n    headers: {}; // Key-value pairs representing HTTP headers\r\n    status: number | null; // HTTP status\r\n    statusText: string | null;\r\n}\r\n\r\n/**\r\n * Gets, loosely, whether an object implements the {@link GoogleError} interface\r\n * \r\n * @param obj - the object to check\r\n * @return true if the object loosely implements {@link GoogleError}\r\n */\r\nfunction isGoogleErrorObject(obj: any): obj is GoogleError { // tslint:disable-line:no-any\r\n    if (typeof obj === \"object\" && \"result\" in obj) {\r\n        let result = obj.result || {};\r\n        if (\"error\" in result) {\r\n            let error = result.error;\r\n            return (typeof error.code === \"number\" && typeof error.message === \"string\");\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * An error thrown by {@link CalendarApi} when encountering errors.  Aims to provide a friendlier interface than\r\n * Google's error objects.\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class ApiHttpError extends Error {\r\n    constructor(reason: string, statusCode: number | null | undefined) {\r\n        let preface = (statusCode != null) ? \"HTTP \" + statusCode : \"No response -- check connection\";\r\n        super(`${preface}: ${reason}`);\r\n        // tslint:disable-next-line:max-line-length\r\n        // See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        // for why we have to do this setPrototypeOf()\r\n        Object.setPrototypeOf(this, ApiHttpError.prototype);\r\n        this.name = \"ApiHttpError\";\r\n    }\r\n\r\n    /**\r\n     * Checks if an object is similar enough to a Google error object, and if so, uses the contained data to make a new\r\n     * ApiError.  Otherwise, returns null.\r\n     * \r\n     * @param obj - object from which to make a ApiHttpError\r\n     * @return {ApiHttpError | null} a new ApiError if the object was suitable, and null otherwise\r\n     */\r\n    static tryToConvert(obj: any): ApiHttpError | null { // tslint:disable-line:no-any\r\n        if (obj instanceof ApiHttpError) {\r\n            return obj;\r\n        }\r\n        if (isGoogleErrorObject(obj)) {\r\n            return new ApiHttpError(obj.result.error.message, obj.status);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport ErrorButton from \"./ErrorButton\";\r\nimport { ApiHttpError } from \"../CalendarApi\";\r\n\r\n/**\r\n * @template T - the resolution type of the Promise provided to this button\r\n */\r\ninterface AsyncButtonProps<T> {\r\n    /**\r\n     * CSS classes for the button in its normal state.\r\n     */\r\n    className?: string;\r\n\r\n    /**\r\n     * Text of the button if there is an error.  A reasonable default is provided.\r\n     */\r\n    errorContent?: string;\r\n\r\n    /**\r\n     * A function that provides a Promise to be executed when the button is clicked.\r\n     */\r\n    onClick?(): Promise<T>;\r\n\r\n    /**\r\n     * A callback for when the Promise provided by onClick resolves.  The first argument will contain the resolved\r\n     * value.\r\n     * \r\n     * @param {T} resolveValue - the value the Promise resolved with.\r\n     */\r\n    onPromiseResolved?(resolveValue: T): void;\r\n}\r\n\r\ninterface AsyncButtonState {\r\n    isLoading: boolean;\r\n    isError: boolean;\r\n    errorTooltip: string;\r\n}\r\n\r\n/**\r\n * A button that has three states -- normal, loading, and error.  Takes a function that provides a Promise as a means\r\n * of switching between these states.  While the Promise is pending, displays a disabled button.  If it rejects,\r\n * displays an error button that can retry the Promise.  Finally, if the Promise resolves, returns the button to its\r\n * normal state.\r\n * \r\n * @template T - the resolution type of the Promise provided to this button\r\n * @author Silas Hsu\r\n */\r\nclass AsyncButton<T> extends React.Component<AsyncButtonProps<T>, AsyncButtonState> {\r\n    static defaultProps = {\r\n        errorContent: \"Error - retry?\"\r\n    };\r\n\r\n    constructor(props: AsyncButtonProps<T>) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            isError: false,\r\n            errorTooltip: \"\",\r\n        };\r\n        this.buttonClicked = this.buttonClicked.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Calls the promise-returning function provided via props, and then executes it.  This function sets the loading\r\n     * state immediately, and also sets state when the promise resolves or rejects.\r\n     */\r\n    buttonClicked(): void {\r\n        if (!this.props.onClick) {\r\n            return;\r\n        }\r\n        this.setState({isLoading: true});\r\n        this.props.onClick()\r\n            .then((resolveValue) => {\r\n                if (this.props.onPromiseResolved) {\r\n                    this.props.onPromiseResolved(resolveValue);\r\n                }\r\n                this.setState({isLoading: false});\r\n            })\r\n            .catch((error) => {\r\n                window.console.error(error);\r\n                this.setState({\r\n                    isLoading: false,\r\n                    isError: true,\r\n                    errorTooltip: error instanceof ApiHttpError ? error.message : \"\"\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * - Normal state - renders a button with text specified by this.props.children.\r\n     * - Loading state - renders a disabled button.\r\n     * - Error state - renders an error button that can retry the promise, and has a tooltip depending on the error.\r\n     * \r\n     * @return {JSX.Element} the element to render\r\n     */\r\n    render(): JSX.Element {\r\n        if (this.state.isLoading) {\r\n            return <button className=\"btn btn-light\" disabled={true}>Working...</button>;\r\n        }\r\n        if (this.state.isError) {\r\n            return (\r\n            <ErrorButton tooltip={this.state.errorTooltip} onClick={this.buttonClicked}>\r\n                {this.props.errorContent}\r\n            </ErrorButton>\r\n            );\r\n        }\r\n        \r\n        return <button className={this.props.className} onClick={this.buttonClicked}>{this.props.children}</button>;\r\n    }\r\n}\r\n\r\nexport default AsyncButton;\r\n","import * as React from \"react\";\r\nimport AsyncButton from \"./AsyncButton\";\r\n\r\ninterface AuthPanelProps {\r\n    /**\r\n     * Whether the user is signed in or not.\r\n     */\r\n    isSignedIn: boolean;\r\n\r\n    /**\r\n     * Called when an API sign in is requested.\r\n     */\r\n    onSignInRequested?(): Promise<void>;\r\n\r\n    /**\r\n     * Called when an API sign in is requested.\r\n     */\r\n    onSignOutRequested?(): Promise<void>;\r\n\r\n    /**\r\n     * Called when onSignInRequested or onSignOutRequested has resolved.\r\n     */\r\n    onAuthChangeComplete?(): void;\r\n}\r\n\r\n/**\r\n * An AsyncButton with specific type void.  Aliased because we cannot specify it in JSX.\r\n */\r\nclass AsyncButtonVoid extends AsyncButton<void> {}\r\n\r\n/**\r\n * Component presenting buttons for logging in and out of Calendar API.\r\n * \r\n * @param {AuthPanelProps} props\r\n * @return {JSX.Element} component to render\r\n * @author Silas Hsu\r\n */\r\nfunction AuthPanel(props: AuthPanelProps): JSX.Element {\r\n    if (!props.isSignedIn) {\r\n        return (\r\n        <div>\r\n            <p>Click the button to grant access to your Google calendar.</p>\r\n            <AsyncButtonVoid\r\n                className=\"btn btn-primary\"\r\n                onClick={props.onSignInRequested}\r\n                onPromiseResolved={props.onAuthChangeComplete}\r\n                errorContent=\"Permission failed - retry?\"\r\n            >\r\n                Grant permission \r\n            </AsyncButtonVoid>\r\n        </div>\r\n        );\r\n    } else {\r\n        return (\r\n        <div>\r\n            <p>You have granted access to your calendar.</p>\r\n            <AsyncButtonVoid\r\n                className=\"btn btn-light\"\r\n                onClick={props.onSignOutRequested}\r\n                onPromiseResolved={props.onAuthChangeComplete}\r\n                errorContent=\"End session failed - retry?\"\r\n            >\r\n                End session\r\n            </AsyncButtonVoid>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AuthPanel;\r\n","import * as React from \"react\";\r\nimport \"./css/ScheduleInput.css\";\r\n\r\nconst INPUT_PLACEHOLDER = \"Go to WebSTAC >> Courses & Registration >> Class Schedule.\\n\" +\r\n    \"Then, SELECT ALL the text, including finals schedule, and copy and paste it into this box.\";\r\n\r\ninterface ScheduleInputProps {\r\n    /**\r\n     * The current contents of the input box.\r\n     */\r\n    value?: string;\r\n\r\n    /**\r\n     * The number of events parsed from the input.\r\n     */\r\n    numEventsParsed?: number;\r\n\r\n    /**\r\n     * Callback for when the user modifies the input box.\r\n     */\r\n    onChange?(event: React.ChangeEvent<HTMLTextAreaElement>): void;\r\n}\r\n\r\n/**\r\n * Component that contains a box for pasting class and finals schedule, as well as instructions on how and feedback on\r\n * parse results.  The input box is completely controlled; the parent must pass the current contents via props.\r\n * \r\n * @param {ScheduleInputProps} props\r\n */\r\nfunction ScheduleInput(props: ScheduleInputProps): JSX.Element {\r\n    let textareaClassName = \"ScheduleInput-input-box\";\r\n    let parseNotice = null;\r\n    if (props.value) {\r\n        const numParsed = props.numEventsParsed || 0;\r\n        if (numParsed > 0) {\r\n            textareaClassName += \" ScheduleInput-success-border\";\r\n            parseNotice = <ParseSuccessNotice numEvents={numParsed} />;\r\n        } else {\r\n            textareaClassName += \" ScheduleInput-failed-border\";\r\n            parseNotice = parseFailedNotice;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <p>\r\n                <a href=\"https://acadinfo.wustl.edu/apps/ClassSchedule/\" target=\"_blank\" rel=\"noreferrer\">\r\n                  Click here to go to your WebSTAC class schedule.\r\n                </a> Then, SELECT ALL and copy and paste everything into this text box.\r\n            </p>\r\n            <p>\r\n                <button className=\"btn btn-secondary\" data-toggle=\"modal\" data-target=\"#help-modal\">More help</button>\r\n            </p>\r\n            <textarea\r\n                className={textareaClassName}\r\n                placeholder={INPUT_PLACEHOLDER}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n        {parseNotice}\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * An alert for a successful parse of the user's schedule.\r\n * \r\n * @param {object} props\r\n * @param {number} props.numEvents - the number of events that were parsed successfully.\r\n * @return {JSX.Element} the element to render\r\n */\r\nfunction ParseSuccessNotice(props: {numEvents: number}): JSX.Element {\r\n    return (\r\n    <div className=\"alert alert-success ScheduleInput-notice\" role=\"alert\">\r\n        {props.numEvents} events found!  Scroll down to confirm additions to calendar.\r\n        <br/>\r\n        <i className=\"fa fa-arrow-down ScheduleInput-arrow\" aria-hidden=\"true\" />\r\n    </div>\r\n    );\r\n}\r\n\r\n/**\r\n * An alert for a failed parse of the user's schedule.\r\n */\r\nconst parseFailedNotice = (\r\n    <div className=\"alert alert-danger ScheduleInput-notice ScheduleInput-parse-failed\" role=\"alert\">\r\n        <p>We weren't able to detect any of your classes or finals.</p>\r\n        <ul>\r\n            <li>Be sure you're pasting your entire class schedule, including Course IDs.</li>\r\n            <li>You could be using an unsupported browser.  Try copying WebSTAC from the desktop version of Chrome,\r\n              Firefox, Safari, Opera, or Edge.</li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default ScheduleInput;\r\n","import * as ReactGA from \"react-ga\";\r\n\r\nconst TRACKING_ID = \"UA-58192647-1\";\r\nconst IS_PRODUCTION = process.env.NODE_ENV === \"production\";\r\n\r\n/**\r\n * Wrapper for Google Analytics.  Handles initialization and only sends events if the environment is production.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass Analytics {\r\n    private static isInitialized = false;\r\n\r\n    /**\r\n     * Makes a new Analytics object.  Will initialize Google Analytics, but only on first call to this constructor.\r\n     */\r\n    constructor() {\r\n        if (!Analytics.isInitialized && IS_PRODUCTION) {\r\n            ReactGA.initialize(TRACKING_ID);\r\n            ReactGA.set({anonymizeIp: true});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a page view event.\r\n     * \r\n     * @param {string} path - relative path of the page\r\n     */\r\n    sendPageView(path: string) {\r\n        if (IS_PRODUCTION) {\r\n            ReactGA.pageview(path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Record user interaction.  See https://github.com/react-ga/react-ga#reactgaeventargs\r\n     */\r\n    sendEvent(args: ReactGA.EventArgs) {\r\n        if (IS_PRODUCTION) {\r\n            ReactGA.event(args);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Analytics;\r\n","import moment from \"moment\";\r\n\r\nexport interface Semester {\r\n    name: string;\r\n\r\n    /**\r\n     * Start date of the semester; i.e. the first day of classes\r\n     */\r\n    startDate: moment.Moment;\r\n\r\n    /**\r\n     * This will be used in the calendar request's recurrance field.  It should be set to the day AFTER classes end.\r\n     */\r\n    endDate: moment.Moment; \r\n}\r\n\r\nexport const semester: Semester = {\r\n    name: \"SP23\",\r\n    startDate: moment(\"2023-01-17\", \"YYYY-MM-DD\", true),\r\n    endDate: moment(\"2023-04-29\", \"YYYY-MM-DD\", true),\r\n};\r\n\r\nif (!semester.startDate.isValid() || !semester.endDate.isValid() || semester.endDate.isBefore(semester.startDate)) {\r\n    throw new Error(\"Semester dates are invalid\");\r\n}\r\n\r\nexport default semester;\r\n","export enum ValidationErrorReason {\r\n    PERMISSION_DENIED = \"Scroll up to step 1 and grant permission first.\",\r\n    NO_CALENDAR_SELECTED = \"Select a calendar first.\",\r\n    DATE = \"Enter a date in a supported format, like YYYY-MM-DD.\",\r\n    TIME = \"Enter a valid time (HH:MM[am/pm]).\",\r\n    END_BEFORE_START = \"End time must be AFTER start time.\",\r\n    REPEAT_REQUIRED = \"Select at least one day of the week.\",\r\n}\r\n\r\n/**\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class ValidationError extends Error {\r\n    constructor(reason: ValidationErrorReason) {\r\n        super(reason);\r\n        // tslint:disable-next-line:max-line-length\r\n        // See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        // for why we have to do this setPrototypeOf()\r\n        Object.setPrototypeOf(this, ValidationError.prototype);\r\n        this.name = \"ValidationError\";\r\n    }\r\n}\r\n\r\nexport default ValidationError;\r\n","import moment from \"moment\";\r\nimport { semester } from \"./Semester\";\r\nimport { ValidationError, ValidationErrorReason } from \"./ValidationError\";\r\n\r\n// All of these used directly or indirectly in generateEventObject()\r\nconst DATE_FORMATS = [\"MMM D YYYY\", \"YYYY-MM-DD\"];\r\nconst TIME_FORMAT = \"h:mmA\";\r\nconst RECURRANCE_DAY_STRINGS = [\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"];\r\nconst RECURRANCE_END_FORMAT = \"YYYYMMDD\";\r\nconst TIME_ZONE = \"America/Chicago\";\r\nconst DESCRIPTION = \"Created by WebSTAC to Calendar\";\r\nconst REMINDERS = {\r\n    overrides: [],\r\n    useDefault: false\r\n};\r\n\r\n// Example of an ISO 8601 date: 2017-10-09T02:33:50Z\r\nconst ISO_TIME_START_INDEX = 11;\r\nconst ISO_TIME_CHARS_TO_KEEP = 8; // Should keep everything except the \"Z\"\r\n\r\nexport enum EventInputButtonState {\r\n    normal,\r\n    loading,\r\n    success,\r\n    error,\r\n}\r\n\r\n/**\r\n * Stores all the information needed to render a event's information.  Also, contains methods for generating event\r\n * objects that CalendarApi understands and can post to a user's calendar.\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class EventInputModel {\r\n    static readonly DAYS_PER_WEEK = 7;\r\n\r\n    name: string = \"\";\r\n    location: string = \"\";\r\n    \r\n    /**\r\n     * The date for this event.  This model currently only supports events that start and end on the same date.\r\n     */\r\n    date: string = \"\";\r\n    startTime: string = \"\";\r\n    endTime: string = \"\";\r\n\r\n    /**\r\n     * Whether this event is a course.  If true, imposes extra validation of repeating days and uses semester.ts's dates\r\n     * when generating event objects.\r\n     */\r\n    isCourse: boolean = true;\r\n    /**\r\n     * An array of boolean, one for each day of the week.  Monday is index 0 and Sunday is index 6.\r\n     */\r\n    repeatingDays: boolean[] = Array(EventInputModel.DAYS_PER_WEEK).fill(false);\r\n\r\n    buttonState: EventInputButtonState = EventInputButtonState.normal;\r\n    successUrl: string | null = null;\r\n    error: Error | null = null;\r\n\r\n    /**\r\n     * A flag used by EventTable.\r\n     */\r\n    isCustom: boolean = false;\r\n\r\n    /**\r\n     * @return {boolean} whether this event is repeating, i.e. if at least one repeating day is selected\r\n     */\r\n    getIsRepeating(): boolean {\r\n        return this.repeatingDays.some(day => day); // Identity function\r\n    }\r\n\r\n    /**\r\n     * @return {boolean} whether it is appropriate to upload this event to the user's calendar\r\n     */\r\n    getIsReadyToAdd(): boolean {\r\n        return this.buttonState === EventInputButtonState.normal || this.buttonState === EventInputButtonState.error;\r\n    }\r\n\r\n    /**\r\n     * Gets this event's date as a parsed Moment object.  If this event is a student's course, statically uses the\r\n     * semester's start date as this event's day, no matter the value of `this.date`.\r\n     * \r\n     * This method takes into consideration repeating days, moving the event forward to the nearest day selected for\r\n     * repeat.  For example, if the event's date is on a Monday, but it is set to only repeat on Wednesdays and Fridays,\r\n     * the returned data will express that the event's date is Wednesday.\r\n     * \r\n     * Note that the returned date may be invalid; use moment.js's isValid() method to check.\r\n     * \r\n     * @return {moment.Moment} this event's date\r\n     */\r\n    getDate(): moment.Moment {\r\n        let date = this.isCourse ? semester.startDate.clone() : moment(this.date, DATE_FORMATS, true);\r\n        // isoWeekday() has Monday = 1 and Sunday = 7.  Convert to our indexing.\r\n        let dateDayOfWeek = date.isoWeekday() - 1;\r\n        let dayOffset = this.daysUntilNextRepeatingDay(dateDayOfWeek);\r\n        if (dayOffset > 0) {\r\n            date.add(dayOffset, \"days\");\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * Generates a data blob that Google understands and can be posted to a user's calendar.  Dates and times require\r\n     * parsing, and other restrictions exist, so this method potentially throws ValidationError.\r\n     * \r\n     * @return {gapi.client.calendar.EventInput} object suitable for addition to Google calendar\r\n     * @throws {ValidationError}\r\n     */\r\n    generateEventObject(): gapi.client.calendar.EventInput {\r\n        let {startDateTime, endDateTime} = this.generateStartEndTimes();\r\n        return {\r\n            summary: this.name,\r\n            location: this.location,\r\n            start: {\r\n                dateTime: startDateTime,\r\n                timeZone: TIME_ZONE\r\n            },\r\n            end: {\r\n                dateTime: endDateTime,\r\n                timeZone: TIME_ZONE\r\n            },\r\n            recurrence: this.generateRecurrence(),\r\n            description: DESCRIPTION,\r\n            reminders: REMINDERS,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts this event's date, start time, and end time into a format that Google understands.  If parsing fails or\r\n     * end time is before start time, throws ValidationError.\r\n     * \r\n     * @return {object} startEndTimes - parsed data\r\n     * @return {string} startDateTime - start date and time of the event\r\n     * @return {string} endDateTime - end date and time of the event\r\n     * @throws {ValidationError}\r\n     */\r\n    protected generateStartEndTimes() {\r\n        const date = this.getDate();\r\n        if (!date.isValid()) {\r\n            throw new ValidationError(ValidationErrorReason.DATE);\r\n        }\r\n        const startTime = moment.utc(this.startTime, TIME_FORMAT, true);\r\n        const endTime = moment.utc(this.endTime, TIME_FORMAT, true);\r\n        if (!startTime.isValid() || !endTime.isValid()) {\r\n            throw new ValidationError(ValidationErrorReason.TIME);\r\n        }\r\n        if (endTime.isBefore(startTime)) {\r\n            throw new ValidationError(ValidationErrorReason.END_BEFORE_START);\r\n        }\r\n\r\n        const dateISOString = date.toISOString().substring(0, ISO_TIME_START_INDEX);\r\n        const startTimeISOString = startTime.toISOString().substr(ISO_TIME_START_INDEX, ISO_TIME_CHARS_TO_KEEP);\r\n        const endTimeISOString = endTime.toISOString().substr(ISO_TIME_START_INDEX, ISO_TIME_CHARS_TO_KEEP); \r\n        return {\r\n            startDateTime: dateISOString + startTimeISOString,\r\n            endDateTime: dateISOString + endTimeISOString,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts this event's repeating days into a format Google understands.  Statically uses the semester's end date\r\n     * as the end of the repeat.  Throws ValidationError if this event is a course but not repeating.\r\n     * \r\n     * @return {string[]} an array of string containing the event's repeating days.\r\n     * @throws {ValidationError} if this event is a course but not repeating.\r\n     */\r\n    protected generateRecurrence(): string[] {\r\n        if (this.isCourse && !this.getIsRepeating()) { // Courses need a repeat set!\r\n            throw new ValidationError(ValidationErrorReason.REPEAT_REQUIRED);\r\n        }\r\n\r\n        let stringDays = [];\r\n        for (let i = 0; i < this.repeatingDays.length; i++) {\r\n            if (this.repeatingDays[i]) {\r\n                stringDays.push(RECURRANCE_DAY_STRINGS[i]);\r\n            }\r\n        }\r\n\r\n        if (stringDays.length > 0) {\r\n            const endRepeat = semester.endDate.format(RECURRANCE_END_FORMAT);\r\n            return [`RRULE:FREQ=WEEKLY;UNTIL=${endRepeat};BYDAY=${stringDays.join(\",\")}`];\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starting from `afterDay` (with Monday = 0), counts forward the number of days until the first day of the week\r\n     * that is repeating.  Returns the number of days counted forward.  Returns -1 if there are no repeating days.\r\n     *\r\n     * Examples:\r\n     *   - MW repeating, afterDayOfWeek = 0 --> returns 0\r\n     *   - MW repeating, afterDayOfWeek = 2 --> returns 0\r\n     *   - M repeating, afterDayOfWeek = 4 --> returns 3\r\n     */\r\n    protected daysUntilNextRepeatingDay(afterDay: number) {\r\n        let dayIndex = afterDay;\r\n        for (let i = 0; i < EventInputModel.DAYS_PER_WEEK; i++) {\r\n            if (this.repeatingDays[dayIndex]) {\r\n                return i;\r\n            }\r\n            dayIndex = (dayIndex + 1) % 7;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport default EventInputModel;\r\n","import EventInputModel from \"./EventInputModel\";\r\n\r\n/*\r\nA course looks like this:\r\nE81 CSE 515T 01\tBayesian Methods in Machine Learning\t3.0\tC\t-T-R--- 2:30p-4:00p\tWhitaker / 218\tGarnett\r\n*/\r\nconst COURSE_REGEX = /[A-Z]\\d\\d.+/g; // Match something that looks like department letter and course number\r\n// Something that looks like \"M-W---- 10:00a-11:30p\"\r\nconst DAYS_AND_TIME_REGEX = /([\\w-]+) (\\d\\d?:\\d\\d[ap])-(\\d\\d?:\\d\\d[ap])/;\r\nconst DAYS_PER_WEEK = EventInputModel.DAYS_PER_WEEK;\r\n\r\nconst columnIndices = {\r\n    MIN_EXPECTED: 5,\r\n    NAME: 1,\r\n    DAYS_AND_TIME: 4,\r\n    LOCATION: 5\r\n};\r\n\r\nconst daysAndTimeCaptureGroups = {\r\n    DAYS: 1,\r\n    START_TIME: 2,\r\n    END_TIME: 3,\r\n};\r\n\r\n/**\r\n * Parses courses from WebSTAC.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass CourseParser {\r\n    /**\r\n     * Parses courses from WebSTAC, returning them in an array of EventInputModel.  Returns an empty array if no courses\r\n     * could be parsed.\r\n     * \r\n     * @param {string} rawInput - class schedule copy-pasted from WebSTAC\r\n     * @return {EventInputModel[]} array of parsed courses\r\n     */\r\n    parseCourses(rawInput: string): EventInputModel[] {\r\n        let fuzzyCourseMatches = rawInput.match(COURSE_REGEX);\r\n        if (!fuzzyCourseMatches) {\r\n            return [];\r\n        }\r\n\r\n        let eventModels = [];\r\n        for (let fuzzyCourseMatch of fuzzyCourseMatches) {\r\n            let columns = fuzzyCourseMatch.split(\"\\t\");\r\n            if (columns.length < columnIndices.MIN_EXPECTED) {\r\n                continue;\r\n            }\r\n\r\n            let daysAndTimeMatch = columns[columnIndices.DAYS_AND_TIME].match(DAYS_AND_TIME_REGEX) || [];\r\n\r\n            let eventModel = new EventInputModel();\r\n            eventModel.isCourse = true;\r\n            eventModel.name = columns[columnIndices.NAME].trim() || \"\";\r\n            eventModel.location = columns[columnIndices.LOCATION] || \"\";\r\n            eventModel.repeatingDays = this.parseCourseDays(daysAndTimeMatch[daysAndTimeCaptureGroups.DAYS] || \"\");\r\n            eventModel.startTime = daysAndTimeMatch[daysAndTimeCaptureGroups.START_TIME] || \"\";\r\n            eventModel.endTime = daysAndTimeMatch[daysAndTimeCaptureGroups.END_TIME] || \"\";\r\n            \r\n            eventModels.push(eventModel);\r\n        }\r\n        return eventModels;\r\n    }\r\n\r\n    /**\r\n     * Something that looks like \"M-W----\"\r\n     * @param {string} rawInput a WebSTAC days-of-the-week string\r\n     * @return {boolean[]}\r\n     */\r\n    private parseCourseDays(rawInput: string): boolean[] {\r\n        let daysArray = Array(DAYS_PER_WEEK).fill(false);\r\n        if (rawInput.length === DAYS_PER_WEEK) {\r\n            for (let i = 0; i < DAYS_PER_WEEK; i++) {\r\n                // I'm not going to check if the letter is the right one for the position, since I'm not sure what\r\n                // WebSTAC uses for Saturday and Sunday.\r\n                if (rawInput.charAt(i) !== \"-\") { \r\n                    daysArray[i] = true;\r\n                }\r\n            }\r\n        }\r\n        return daysArray;\r\n    }\r\n}\r\n\r\nexport default CourseParser;\r\n","import EventInputModel from \"./EventInputModel\";\r\n\r\n/*\r\nAn exam looks like this; it takes up two lines:\r\n\r\nMay 5 2017 6:00PM - 8:00PM\tE81 CSE 431S 01\tTranslation of Computer Languages\r\nExam Building / Room:\tSame / Same\r\n*/\r\n\r\n// I'm only putting months in which I expect finals\r\nconst DATE_TIME_REGEX = /((Apr|May|Jun|Jul|Aug|Dec) \\d\\d? \\d\\d\\d\\d) (\\d\\d?:\\d\\d[AP]M) - (\\d\\d?:\\d\\d[AP]M)\\t/;\r\nconst NAME_REGEX = /.+\\t(.+)/; // Strings separated by a tab\r\nconst NEWLINE_REGEX = /\\n(?:\\t\\n)?/; // Special since Firefox pastes things differently\r\nconst LOCATION_REGEX = /Exam Building \\/ Room:\\t(.+)/;\r\nconst EXAM_REGEX = new RegExp(\r\n    DATE_TIME_REGEX.source + NAME_REGEX.source + NEWLINE_REGEX.source + LOCATION_REGEX.source,\r\n    \"g\"\r\n);\r\n\r\nconst captureGroups = {\r\n    DATE: 1,\r\n    START_TIME: 3,\r\n    END_TIME: 4,\r\n    NAME: 5,\r\n    LOCATION: 6,\r\n};\r\n\r\n/**\r\n * Parses final exams.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass ExamParser {\r\n    /**\r\n     * Parses exams from WebSTAC, returning them in an array of EventInputModel.  Optionally takes an array of parsed\r\n     * courses which will be used to get locations for exams that are in the same location as the class. Returns an\r\n     * empty array if no exams could be parsed.\r\n     * \r\n     * @param {string} rawInput - class schedule copy-pasted from WebSTAC\r\n     * @param {EventInputModel[]} [parsedCourses] - clues for determining exam locations\r\n     * @return {EventInputModel[]} array of parsed exams\r\n     */\r\n    parseExams(rawInput: string, parsedCourses: EventInputModel[] = []): EventInputModel[] {\r\n        let courseToLocationMap = parsedCourses.reduce((map, course) => {\r\n            map[course.name] = course.location;\r\n            return map;\r\n        }, {} as {[courseName: string]: string});\r\n\r\n        let eventModels = [];\r\n        let examMatch = EXAM_REGEX.exec(rawInput);\r\n        while (examMatch !== null) {\r\n            let eventModel = new EventInputModel();\r\n            eventModel.isCourse = false;\r\n\r\n            let courseName = examMatch[captureGroups.NAME];\r\n            eventModel.name = courseName + \" Final\";\r\n\r\n            let rawLocation = examMatch[captureGroups.LOCATION];\r\n            if (rawLocation === \"Same / Same\") {\r\n                eventModel.location = courseToLocationMap[courseName] || rawLocation;\r\n            } else {\r\n                eventModel.location = rawLocation;\r\n            }\r\n            \r\n            eventModel.date = examMatch[captureGroups.DATE];\r\n            eventModel.startTime = examMatch[captureGroups.START_TIME];\r\n            eventModel.endTime = examMatch[captureGroups.END_TIME];\r\n            \r\n            eventModels.push(eventModel);\r\n            examMatch = EXAM_REGEX.exec(rawInput);\r\n        }\r\n\r\n        return eventModels;\r\n    }\r\n}\r\n\r\nexport default ExamParser;\r\n","import * as React from \"react\";\r\nimport AsyncButton from \"./AsyncButton\";\r\nimport CalendarApi from \"../CalendarApi\";\r\nimport semester from \"../Semester\";\r\n\r\nimport \"./css/EventTableOptions.css\";\r\n\r\ninterface Calendar extends gapi.client.calendar.CalendarListEntry {} // Just an alias\r\n\r\ninterface EventTableOptionsProps {\r\n    /**\r\n     * Used for fetching calendar lists.\r\n     */\r\n    calendarApi?: CalendarApi;\r\n\r\n    /**\r\n     * The currently selected calendar.\r\n     */\r\n    selectedCalendar: Calendar | null;\r\n\r\n    /**\r\n     * Callback for when a calendar is selected.\r\n     */\r\n    onCalendarSelected?(calendar: Calendar | null): void;\r\n}\r\n\r\ninterface EventTableOptionsState {\r\n    /**\r\n     * Current calendar options among which to select.\r\n     */\r\n    calendars: Calendar[];\r\n}\r\n\r\n/**\r\n * An AsyncButton with specific type Calendar[].  Aliased because we cannot specify it in JSX.\r\n */\r\nclass AsyncButtonCalendars extends AsyncButton<Calendar[]> {}\r\n\r\n/**\r\n * Manages calendar and semester <select>s for EventTable.  This component manages available calendar options, but the \r\n * selected option is stored in a parent.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass EventTableOptions extends React.Component<EventTableOptionsProps, EventTableOptionsState> {\r\n    /**\r\n     * Not only initializes state and binds methods, but also immediately fetches calendars, if possible\r\n     * \r\n     * @param {EventTableOptionsProps} props\r\n     */\r\n    constructor(props: EventTableOptionsProps) {\r\n        super(props);\r\n        this.state = {\r\n            calendars: []\r\n        };\r\n        this.getIsLoggedIn = this.getIsLoggedIn.bind(this);\r\n        this.fetchCalendars = this.fetchCalendars.bind(this);\r\n        this.setCalendarList = this.setCalendarList.bind(this);\r\n        this.calendarSelectChanged = this.calendarSelectChanged.bind(this);\r\n        if (this.getIsLoggedIn()) {\r\n            this.fetchCalendars().then(this.setCalendarList);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If props change from logged in to logged out, clears the calendar options.  If props change from being logged out\r\n     * to logged in, fetches a new calendar option list.\r\n     * \r\n     * @param nextProps - next props the component will receive\r\n     */\r\n    componentWillReceiveProps(nextProps: EventTableOptionsProps): void {\r\n        let nextLoggedIn = this.getIsLoggedIn(nextProps.calendarApi);\r\n        if (this.state.calendars.length === 0 && nextLoggedIn) { // We don't have calendars and logged in\r\n            this.fetchCalendars(nextProps.calendarApi).then(this.setCalendarList);\r\n        } else if (this.state.calendars.length > 0 && !nextLoggedIn) { // We have calendars and logged out\r\n            this.setState({calendars: []});\r\n        }\r\n        // We have calendars and logged in: do nothing\r\n        // We don't have calendars and logged out: do nothing\r\n    }\r\n\r\n    /**\r\n     * Gets whether the input API (default this.props.calendarApi) is logged in.  If given undefined, returns false.\r\n     * \r\n     * @param {CalendarApi} [calendarApi=this.props.calendarApi] - the API to check\r\n     */\r\n    getIsLoggedIn(calendarApi: CalendarApi | undefined = this.props.calendarApi): boolean {\r\n        return calendarApi ? calendarApi.getIsSignedIn() : false;\r\n    }\r\n\r\n    /**\r\n     * Fetches the user's calendar list using the given API.  If given undefined, returns a Promise resolved with empty\r\n     * array.\r\n     * \r\n     * @param {CalendarApi} [calendarApi=this.props.calendarApi] - the API used to fetch calendars\r\n     * @return {Promise<Calendar[]>} Promise for the user's calendar list\r\n     */\r\n    fetchCalendars(calendarApi: CalendarApi | undefined = this.props.calendarApi): Promise<Calendar[]> {\r\n        if (calendarApi) {\r\n            return calendarApi.getCalendarList();\r\n        } else {\r\n            return Promise.resolve([]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets this component's calendar option list, but only if the user is still logged in, since it's possible for data\r\n     * to come in after the user has logged out.\r\n     * \r\n     * @param {Calendar[]} newCalendars - new calendar option list\r\n     */\r\n    setCalendarList(newCalendars: Calendar[]): void {\r\n        if (this.getIsLoggedIn()) {\r\n            this.setState({calendars: newCalendars});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for when the component's calendar <select> changes.  Coverts the change event to a Calendar object to\r\n     * pass to the parent.\r\n     * \r\n     * @param {React.ChangeEvent<HTMLSelectElement>} changeEvent - React change event from the calendar <select>\r\n     */\r\n    calendarSelectChanged(changeEvent: React.ChangeEvent<HTMLSelectElement>): void {\r\n        if (this.props.onCalendarSelected) {\r\n            let matchingCalendar = this.state.calendars.find(calendar => calendar.id === changeEvent.target.value);\r\n            this.props.onCalendarSelected(matchingCalendar || null);\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        let selectedCalendarValue = this.props.selectedCalendar ? this.props.selectedCalendar.id : \"\";\r\n        let calendarOptions = this.state.calendars.map(calendar =>\r\n            <option key={calendar.id} value={calendar.id}>{calendar.summary}</option>\r\n        );\r\n\r\n        return (\r\n        <div className=\"EventTableOptions\">\r\n            <div className=\"EventTableOptions-row\">\r\n                <label>Select semester:</label>\r\n                <select>\r\n                    <option key={semester.name} value={semester.name}>{semester.name}</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"EventTableOptions-row\">\r\n                <label>Select calendar:</label>\r\n                <select value={selectedCalendarValue} onChange={this.calendarSelectChanged}>\r\n                    <option value=\"\">Select a calendar...</option>\r\n                    {calendarOptions}\r\n                </select>\r\n                <span className=\"EventTableOptions-refresh-list-button\">\r\n                {\r\n                    this.getIsLoggedIn() ?\r\n                        <AsyncButtonCalendars\r\n                            className=\"btn btn-secondary\"\r\n                            onClick={this.fetchCalendars}\r\n                            onPromiseResolved={this.setCalendarList}\r\n                        >\r\n                            Refresh list\r\n                        </AsyncButtonCalendars>\r\n                        :\r\n                        null\r\n                    }\r\n                </span>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventTableOptions;\r\n","import * as React from \"react\";\r\nimport ErrorButton from \"./ErrorButton\";\r\nimport { ApiHttpError } from \"../CalendarApi\";\r\nimport { EventInputModel, EventInputButtonState } from \"../EventInputModel\";\r\nimport ValidationError from \"../ValidationError\";\r\n\r\nimport \"./css/EventTableRow.css\";\r\n\r\ninterface EventTableRowProps {\r\n    /**\r\n     * Object containing all the information needed to render.\r\n     */\r\n    model: EventInputModel;\r\n\r\n    /**\r\n     * Called when the user modified any of the inputs in the row.\r\n     * \r\n     * @param {Pick<EventInputModel, K>} propsToChange - props that should be merged into the model passed via props\r\n     */\r\n    onModelChangeRequested?<K extends keyof EventInputModel>(propsToChange: Pick<EventInputModel, K>): void;\r\n\r\n    /**\r\n     * Called when the user presses the row's \"add to calendar\" button.\r\n     */\r\n    onAddButtonPressed?(): void;\r\n}\r\n\r\nconst inputSizes = {\r\n    DATE: 12,\r\n    TIME: 6,\r\n    NAME: 35,\r\n    LOCATION: 30\r\n};\r\n\r\n/**\r\n * Renders a single row of EventTable.  This component is completely controlled.\r\n * \r\n * @param {EventTableRowProps} props\r\n * @author Silas Hsu\r\n */\r\nfunction EventTableRow(props: EventTableRowProps): JSX.Element {\r\n    const model = props.model;\r\n    const modelChangeCallback = props.onModelChangeRequested || (() => undefined);\r\n\r\n    const checkboxCallback = function(index: number, value: boolean) {\r\n        let newRepeatingDays = props.model.repeatingDays.slice();\r\n        newRepeatingDays[index] = value;\r\n        modelChangeCallback({repeatingDays: newRepeatingDays});\r\n    };\r\n\r\n    const renderCheckboxes = function() {\r\n        return model.repeatingDays.map((isRepeat, index) => (\r\n            <input\r\n                type=\"checkbox\"\r\n                key={index}\r\n                checked={isRepeat}\r\n                onChange={event => checkboxCallback(index, event.target.checked)}\r\n            />)\r\n        );\r\n    };\r\n\r\n    let trClassName = \"EventTableRow\";\r\n    if (!model.isCourse) {\r\n        trClassName += \" EventTableRow-final\";\r\n    }\r\n    return (\r\n    <tr className={trClassName}>\r\n        <td> {/* Name */}\r\n            <input\r\n                type=\"text\"\r\n                className=\"EventTableRow-full-width\"\r\n                value={model.name}\r\n                size={inputSizes.NAME}\r\n                onChange={event => modelChangeCallback({name: event.target.value})}\r\n            />\r\n        </td>\r\n        <td>\r\n        { \r\n            props.model.isCourse ? // Course: checkboxes for repeating days\r\n                renderCheckboxes() \r\n                : // Otherwise: date input\r\n                <input\r\n                    type=\"text\"\r\n                    value={model.date}\r\n                    size={inputSizes.DATE}\r\n                    onChange={event => modelChangeCallback({date: event.target.value})}\r\n                />\r\n        }\r\n        </td>\r\n        <td> {/* Start and end times */}\r\n            <input \r\n                type=\"text\"\r\n                value={model.startTime}\r\n                size={inputSizes.TIME}\r\n                onChange={event => modelChangeCallback({startTime: event.target.value})}\r\n            />\r\n            -\r\n            <input\r\n                type=\"text\"\r\n                value={model.endTime}\r\n                size={inputSizes.TIME}\r\n                onChange={event => modelChangeCallback({endTime: event.target.value})}\r\n            />\r\n        </td>\r\n        <td> {/* Location */}\r\n            <input\r\n                type=\"text\"\r\n                className=\"EventTableRow-full-width\"\r\n                value={model.location}\r\n                size={inputSizes.LOCATION}\r\n                onChange={event => modelChangeCallback({location: event.target.value})}\r\n            />\r\n        </td>\r\n        <td><RowButton {...props} /></td>\r\n    </tr>\r\n    );\r\n}\r\n\r\n/**\r\n * Renders the button under the \"Add to calendar\" column.\r\n * \r\n * @param {EventTableRowProps} props - same props passed to EventTableRow\r\n */\r\nfunction RowButton(props: EventTableRowProps): JSX.Element {\r\n    switch (props.model.buttonState) {\r\n        case EventInputButtonState.loading:\r\n            return <button className=\"btn btn-light\" disabled={true}>Working...</button>;\r\n        case EventInputButtonState.success:\r\n            return (\r\n            <a \r\n                className=\"btn btn-success\"\r\n                href={props.model.successUrl || undefined}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                <i className=\"fa fa-check\" aria-hidden=\"true\" />Added!\r\n            </a>\r\n            );\r\n        case EventInputButtonState.error:\r\n            const error = props.model.error;\r\n            let tooltip;\r\n            if (error instanceof ValidationError || error instanceof ApiHttpError) {\r\n                tooltip = \"Couldn't post event: \" + error.message;\r\n            } else {\r\n                tooltip = \"Unexpected error (bug?) -- Check developers' console for technical details.\";\r\n                if (error == null) {\r\n                    window.console.error(\r\n                        \"Button state was set to error, but model.error is empty.  Are you setting state correctly?\"\r\n                    );\r\n                }\r\n            }\r\n            return <ErrorButton tooltip={tooltip} onClick={props.onAddButtonPressed}>Failed - retry?</ErrorButton>;\r\n        case EventInputButtonState.normal:\r\n        default:\r\n            return <button className=\"btn btn-light\" onClick={props.onAddButtonPressed}>\r\n                <i className=\"fa fa-plus-circle\" aria-hidden=\"true\"/>Add\r\n            </button>;\r\n    }\r\n}\r\n\r\nexport default EventTableRow;\r\n","import * as React from \"react\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport EventTableOptions from \"./EventTableOptions\";\r\nimport EventTableRow from \"./EventTableRow\";\r\n\r\nimport Analytics from \"../Analytics\";\r\nimport { CalendarApi } from \"../CalendarApi\";\r\nimport { EventInputModel, EventInputButtonState } from \"../EventInputModel\";\r\nimport { ValidationError, ValidationErrorReason } from \"../ValidationError\";\r\n\r\nimport \"./css/EventTable.css\";\r\n\r\ninterface EventTableProps {\r\n    /**\r\n     * Events for the table to display.\r\n     */\r\n    events: EventInputModel[];\r\n\r\n    /**\r\n     * API for adding events to the user's calendar.\r\n     */\r\n    calendarApi?: CalendarApi;\r\n}\r\n\r\ninterface EventTableState {\r\n    /**\r\n     * All events the table is displaying.  Forked from props.events, since the user can modify them.\r\n     */\r\n    events: EventInputModel[];\r\n\r\n    /**\r\n     * The calendar to which the user wishes to add events.\r\n     */\r\n    selectedCalendar: gapi.client.calendar.CalendarListEntry | null;\r\n\r\n    /**\r\n     * After pressing the \"add all\" button, whether requests are still in flight.\r\n     */\r\n    isAddingAll: boolean;\r\n}\r\n\r\n/**\r\n * Table that displays events to add to Google calendar, as well as options for doing so.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass EventTable extends React.Component<EventTableProps, EventTableState> {\r\n    analytics: Analytics;\r\n\r\n    constructor(props: EventTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            events: props.events,\r\n            selectedCalendar: null,\r\n            isAddingAll: false,\r\n        };\r\n        this.analytics = new Analytics();\r\n\r\n        this.addCustomEvent = this.addCustomEvent.bind(this);\r\n        this.updateOneEvent = this.updateOneEvent.bind(this);\r\n        this.validateOptions = this.validateOptions.bind(this);\r\n        this.addButtonPressed = this.addButtonPressed.bind(this);\r\n        this.addAllButtonPressed = this.addAllButtonPressed.bind(this);\r\n        this.addModelToCalendar = this.addModelToCalendar.bind(this);\r\n        this.renderEventTableRows = this.renderEventTableRows.bind(this);\r\n    }\r\n\r\n    /**\r\n     * If new events are incoming via props, replaces all non-custom events in the table with them.\r\n     * \r\n     * @param {EventTableProps} nextProps - next props the component will receive\r\n     */\r\n    componentWillReceiveProps(nextProps: EventTableProps): void {\r\n        if (this.props.events !== nextProps.events) {\r\n            let customEvents = this.state.events.filter(event => event.isCustom);\r\n            let newEvents = nextProps.events.concat(customEvents);\r\n            this.setState({events: newEvents});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a custom course to the table.\r\n     */\r\n    addCustomEvent(): void {\r\n        const newEvent = new EventInputModel();\r\n        newEvent.isCustom = true;\r\n\r\n        const newEvents = this.state.events.slice();\r\n        newEvents.push(newEvent);\r\n        \r\n        this.analytics.sendEvent({category: \"Buttons\", action: \"Custom event\"});\r\n        this.setState({events: newEvents});\r\n    }\r\n\r\n    /**\r\n     * Changes, without mutation, one event of this.state.events, then sets state.\r\n     * \r\n     * @param {Pick<EventInputModel, K>} propsToChange - props to merge into the event to change\r\n     * @param {number} index - the index of the event to change\r\n     */\r\n    updateOneEvent<K extends keyof EventInputModel>(propsToChange: Pick<EventInputModel, K>, index: number): void {\r\n        const newEvent = _.cloneDeep(this.state.events[index]);\r\n        if (!newEvent) {\r\n            return;\r\n        }\r\n        const newEvents = this.state.events.slice();\r\n        newEvents[index] = Object.assign(newEvent, propsToChange);\r\n        this.setState({events: newEvents});\r\n    }\r\n\r\n    /**\r\n     * Examines state and determines if events are ready to be added to calendar.  Returns a ValidationError if there is\r\n     * a problem, and null if there is not.\r\n     * \r\n     * @return {ValidationError | null} error object if events are not ready to be added to calendar; null otherwise\r\n     */\r\n    validateOptions(): ValidationError | null {\r\n        if (!this.props.calendarApi || !this.props.calendarApi.getIsSignedIn()) {\r\n            return new ValidationError(ValidationErrorReason.PERMISSION_DENIED);\r\n        }\r\n        if (!this.state.selectedCalendar) {\r\n            return new ValidationError(ValidationErrorReason.NO_CALENDAR_SELECTED);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Callback for when a \"add to calendar\" button is pressed.  Attempts to add an event to the user's calendar.  This\r\n     * method sets state.\r\n     * \r\n     * @param {number} index - the index of the event in this.state.events to add to the user's calendar\r\n     * @return {Promise<void>} Promise that resolves after the event is added\r\n     */\r\n    addButtonPressed(index: number): Promise<void> {\r\n        const event = this.state.events[index];\r\n        if (!event || !event.getIsReadyToAdd()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        const error = this.validateOptions();\r\n        if (error) {\r\n            this.updateOneEvent({buttonState: EventInputButtonState.error, error: error}, index);\r\n            return Promise.resolve();\r\n        } else {\r\n            return this.addModelToCalendar(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for when the \"add all to calendar\" button is pressed.  Attempts to add all events to the user's\r\n     * calendar.  This method sets state.\r\n     */\r\n    async addAllButtonPressed(): Promise<void> {\r\n        this.setState({isAddingAll: true});\r\n        for (let i = 0; i < this.state.events.length; i++) { // Add one at a time so we don't get rate limited\r\n            await this.addButtonPressed(i);\r\n        }\r\n        this.setState({isAddingAll: false});\r\n    }\r\n\r\n    /**\r\n     * Calls on the CalendarApi specified through props and attempts to add an event to the user's calendar.  Returns a\r\n     * Promise that resolves when the task is finished, whether there is an error or not; it never rejects.  Does not\r\n     * set state immediately, but does set state asynchronously.\r\n     * \r\n     * @param index - the index of the event in this.state.events to add to the user's calendar\r\n     * @return {Promise<void>} a Promise that resolves when the task is done\r\n     */\r\n    addModelToCalendar(index: number): Promise<void> {\r\n        if (!this.props.calendarApi || !this.state.selectedCalendar) {\r\n            window.console.warn(\"Cannot add event to calendar: API not loaded or no selected calendar.\");\r\n            return Promise.resolve();\r\n        }\r\n        const event = this.state.events[index];\r\n        if (!event) {\r\n            console.warn(`Cannot add invalid event at index ${index} to calendar.`);\r\n            return Promise.resolve();\r\n        }\r\n\r\n        this.updateOneEvent({buttonState: EventInputButtonState.loading, error: null}, index);\r\n        return this.props.calendarApi.createEvent(this.state.selectedCalendar.id, event)\r\n            .then((htmlLink) => {\r\n                this.analytics.sendEvent({category: \"Calendar\", action: \"Event added\"});\r\n                if (event.isCourse) {\r\n                    this.analytics.sendEvent({category: \"Calendar\", action: \"Course added\"});\r\n                } else {\r\n                    this.analytics.sendEvent({category: \"Calendar\", action: \"Exam added\"});\r\n                }\r\n                this.updateOneEvent(\r\n                    {buttonState: EventInputButtonState.success, successUrl: htmlLink}, index\r\n                );\r\n            })\r\n            .catch(error => {\r\n                if (!(error instanceof ValidationError)) {\r\n                    window.console.error(error);\r\n                }\r\n                this.updateOneEvent({buttonState: EventInputButtonState.error, error: error}, index);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @return an array of table rows\r\n     */\r\n    renderEventTableRows(): JSX.Element[] {\r\n        return this.state.events.map((event, index) => (\r\n            <EventTableRow\r\n                key={index}\r\n                model={event}\r\n                onModelChangeRequested={propsToChange => this.updateOneEvent(propsToChange, index)}\r\n                onAddButtonPressed={() => this.addButtonPressed(index)}\r\n            />\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders the table and its options.\r\n     * \r\n     * @return {JSX.Element} the element to render\r\n     */\r\n    render(): JSX.Element {\r\n        let addAllButton;\r\n        if (this.state.isAddingAll) {\r\n            addAllButton = <button className=\"btn btn-light\" disabled={true}>Working...</button>;\r\n        } else if (this.state.events.length > 0) {\r\n            addAllButton = (\r\n                <button className=\"btn btn-primary\" onClick={this.addAllButtonPressed}>\r\n                    Add all to calendar\r\n                </button>\r\n            );\r\n        } else {\r\n            addAllButton = <button className=\"btn btn-primary\" disabled={true}>Nothing detected</button>;\r\n        }\r\n\r\n        return (\r\n        <div className=\"EventTable\">\r\n            <div className=\"EventTable-options-container\">\r\n                <p>\r\n                    Tip: you can go to <a href=\"https://www.google.com/calendar/\" target=\"_blank\" rel=\"noopener noreferrer\">www.google.com/calendar</a>,\r\n                    create a new calendar there, and then press \"Refresh list\"\r\n                </p>\r\n                <EventTableOptions\r\n                    calendarApi={this.props.calendarApi}\r\n                    selectedCalendar={this.state.selectedCalendar}\r\n                    onCalendarSelected={calendar => this.setState({selectedCalendar: calendar})}\r\n                />\r\n                <p>{addAllButton}</p>\r\n            </div>\r\n            <div className=\"table-responsive\">\r\n                <table className=\"table table-hover table-sm\">\r\n                    <thead>\r\n                        <tr>\r\n                            <td>Class or final name</td>\r\n                            <td>Days (MTWTFSS)</td>\r\n                            <td>Time (start - end)</td>\r\n                            <td>Location</td>\r\n                            <td>Add to calendar</td>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {this.renderEventTableRows()}\r\n                        <tr onClick={this.addCustomEvent}>\r\n                            <td colSpan={5}>\r\n                                <i className=\"fa fa-plus-circle EventTable-add-custom-event\" aria-hidden=\"true\" />\r\n                            </td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventTable;\r\n","import * as React from \"react\";\n\nimport AuthPanel from \"./AuthPanel\";\nimport ScheduleInput from \"./ScheduleInput\";\n\nimport Analytics from \"../Analytics\";\nimport CalendarApi from \"../CalendarApi\";\nimport CourseParser from \"../CourseParser\";\nimport ExamParser from \"../ExamParser\";\nimport EventTable from \"./EventTable\";\nimport EventInputModel from \"../EventInputModel\";\n\nimport \"./css/App.css\";\n\ninterface AppState {\n    calendarApi: CalendarApi | null;\n    isApiLoadError: boolean;\n    rawInputSchedule: string;\n}\n\n/**\n * The root component of everything dynamic in WebSTAC to Calendar.  Loads calendar API, parses user input, and keeps\n * track of what step the user is on. \n * \n * @author Silas Hsu\n */\nclass App extends React.Component<{}, AppState> {\n    analytics: Analytics;\n    courseParser: CourseParser;\n    examParser: ExamParser;\n    parsedEvents: EventInputModel[];\n\n    /**\n     * Not only initializes state and binds methods, but also initializes the calendar API.\n     * \n     * @param {object} props - empty\n     */\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            calendarApi: null,\n            isApiLoadError: false,\n            rawInputSchedule: \"\",\n        };\n        this.analytics = new Analytics();\n        this.courseParser = new CourseParser();\n        this.examParser = new ExamParser();\n        this.parsedEvents = [];\n\n        CalendarApi.getInstance()\n            .then(api => this.setState({calendarApi: api}))\n            .catch(error => {\n                window.console.error(error);\n                this.setState({isApiLoadError: true});\n            });\n\n        this.authStatusChanged = this.authStatusChanged.bind(this);\n        this.inputScheduleChanged = this.inputScheduleChanged.bind(this);\n    }\n\n    /**\n     * Sends a page view event to Analytics.\n     */\n    componentDidMount(): void {\n        this.analytics.sendPageView(\"/\");\n    }\n\n    /**\n     * Triggers a rerender.\n     */\n    authStatusChanged(): void {\n        this.setState({});\n    }\n\n    /**\n     * Parses the new schedule and sets state.\n     * \n     * @param {React.ChangeEvent<HTMLTextAreaElement>} event - the event trigged by the user input changing\n     */\n    inputScheduleChanged(event: React.ChangeEvent<HTMLTextAreaElement>): void {\n        let parsedCourses = this.courseParser.parseCourses(event.target.value);\n        let parsedExams = this.examParser.parseExams(event.target.value, parsedCourses);\n        this.parsedEvents = parsedCourses.concat(parsedExams);\n        if (this.parsedEvents.length > 0) {\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Success\",\n            });\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Courses parsed\",\n                value: parsedCourses.length\n            });\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Exams parsed\",\n                value: parsedExams.length\n            });\n        } else {\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Failure\",\n            });\n        }\n        this.setState({rawInputSchedule: event.target.value});\n    }\n\n    /**\n     * @return {JSX.Element} the component to render\n     */\n    render(): JSX.Element {\n        const stepClassName = \"App-step\";\n        const activeStepClassName = \"App-step App-step-active\";\n        let activeStep;\n        if (!this.state.calendarApi || !this.state.calendarApi.getIsSignedIn()) {\n            activeStep = 1;\n        } else if (this.parsedEvents.length === 0) {\n            activeStep = 2;\n        } else {\n            activeStep = 3;\n        }\n\n        let authPanel = null;\n        if (this.state.isApiLoadError) {\n            authPanel = (\n            <div className=\"alert alert-danger App-api-load-failed\">\n                <h4>Failed to load Calendar API.</h4>\n                {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                Try <a href=\"\">reloading the page</a>.  If that doesn't work, either Google is down (very bad), or there\n                is a serious bug within this app (also very bad).\n            </div>\n            );\n        } else if (this.state.calendarApi) {\n            authPanel = (\n            <AuthPanel\n                isSignedIn={this.state.calendarApi.getIsSignedIn()}\n                onSignInRequested={this.state.calendarApi.signIn}\n                onSignOutRequested={this.state.calendarApi.signOut}\n                onAuthChangeComplete={this.authStatusChanged}\n            />\n            );\n        } else {\n            authPanel = <p>Loading...</p>;\n        }\n\n        return (\n        <div className=\"App\">\n            <div className={activeStep === 1 ? activeStepClassName : stepClassName}>\n                <h3 className=\"App-heading\">① Permission</h3>\n                {authPanel}\n            </div>\n            <div className={activeStep === 2 ? activeStepClassName : stepClassName}>\n                <h3 className=\"App-heading\">② CopyPaste</h3>\n                <ScheduleInput\n                    value={this.state.rawInputSchedule}\n                    onChange={this.inputScheduleChanged}\n                    numEventsParsed={this.parsedEvents.length}\n                />\n            </div>\n            <div className={activeStep === 3 ? activeStepClassName : stepClassName}>\n                <h3 className=\"App-heading\">③ Confirm</h3>\n                <EventTable calendarApi={this.state.calendarApi || undefined} events={this.parsedEvents} />\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","/**\n * Entry point for everything dynamic in WebSTAC to Calendar.\n * \n * @author Silas Hsu\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n// import registerServiceWorker from \"./registerServiceWorker\";\n\n/**\n * Gets whether the current browser is Internet Explorer.  Thanks to StackOverflow for this code!\n * http://stackoverflow.com/questions/19999388/jquery-check-if-user-is-using-ie\n * \n * @return {boolean} whether the current browser is Internet Explorer\n */\nfunction isInternetExplorer() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var trident = ua.indexOf(\"Trident/\");\n    if (msie > 0) {\n        // IE 10 or older => return version number\n        // return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        return true;\n    }\n    if (trident > 0) {\n        // IE 11 (or newer) => return version number\n        // var rv = ua.indexOf('rv:');\n        // return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        return true;\n    }\n    // Other browser\n    return false;\n}\n\n/**\n * Checks that the browser is supported, and if so, creates the app root component.\n */\nwindow.onload = () => {\n    const appRootContainer = document.getElementById(\"root\") as HTMLElement;\n    if (isInternetExplorer()) {\n        const alert = (\n            <div style={{textAlign: \"center\"}} >\n                <div className=\"alert alert-danger\" style={{display: \"inline-block\"}} >\n                    <h4><Frown /> Internet Explorer not supported. <Frown /></h4>\n                    You appear to be using Internet Explorer.  WebSTAC to Calendar does not support IE.  Sorry about\n                    that.\n                </div>\n            </div>\n        );\n        ReactDOM.render(alert, appRootContainer);\n    } else {\n        ReactDOM.render(<App />, appRootContainer);\n    }\n};\n// registerServiceWorker();\n\nfunction Frown() {\n    return <span role=\"img\" aria-label=\"Frown\">🙁</span>;\n}\n"],"sourceRoot":""}