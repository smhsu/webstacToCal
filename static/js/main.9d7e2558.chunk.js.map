{"version":3,"sources":["components/ErrorButton.tsx","CalendarApi.ts","components/AsyncButton.tsx","components/AuthPanel.tsx","components/ScheduleInput.tsx","Analytics.ts","Semester.ts","ValidationError.ts","EventInputModel.ts","CourseParser.ts","ExamParser.ts","components/EventTableOptions.tsx","components/EventTableRow.tsx","components/EventTable.tsx","components/App.tsx","index.tsx"],"names":["ErrorButton","props","button","this","initTooltip","prevProps","tooltip","$","onClick","className","ref","node","data-toggle","data-placement","title","aria-hidden","children","React","DISCOVERY_DOCS","CalendarApi","gapi","auth2","getAuthInstance","currentUser","get","isSignedIn","Promise","resolve","reject","signIn","then","error","ApiHttpError","tryToConvert","signOut","client","calendar","calendarList","list","minAccessRole","response","result","items","calendarId","model","request","events","insert","resource","generateEventObject","success","htmlLink","instancePromise","Error","init","apiKey","process","clientId","scope","discoveryDocs","reason","statusCode","preface","Object","setPrototypeOf","prototype","name","obj","code","message","isGoogleErrorObject","status","AsyncButton","state","isLoading","isError","errorTooltip","buttonClicked","bind","setState","resolveValue","onPromiseResolved","catch","window","console","disabled","errorContent","defaultProps","AsyncButtonVoid","AuthPanel","onSignOutRequested","onAuthChangeComplete","onSignInRequested","INPUT_PLACEHOLDER","INSTRUCTIONS_HTML","ParseSuccessNotice","role","numEvents","parseFailedNotice","ScheduleInput","textareaClassName","parseNotice","value","numParsed","numEventsParsed","dangerouslySetInnerHTML","__html","placeholder","onChange","TRACKING_ID","IS_PRODUCTION","Analytics","isInitialized","ReactGA","anonymizeIp","path","args","semester","startDate","moment","endDate","isValid","isBefore","ValidationErrorReason","EventInputButtonState","ValidationError","DATE_FORMATS","RECURRANCE_DAY_STRINGS","REMINDERS","overrides","useDefault","EventInputModel","location","date","startTime","endTime","isCourse","repeatingDays","Array","DAYS_PER_WEEK","fill","buttonState","normal","successUrl","isCustom","some","day","clone","dateDayOfWeek","isoWeekday","dayOffset","daysUntilNextRepeatingDay","add","generateStartEndTimes","startDateTime","endDateTime","summary","start","dateTime","timeZone","end","recurrence","generateRecurrence","description","reminders","getDate","DATE","utc","TIME","END_BEFORE_START","dateISOString","toISOString","substring","substr","getIsRepeating","REPEAT_REQUIRED","stringDays","i","length","push","endRepeat","format","join","afterDay","dayIndex","COURSE_REGEX","DAYS_AND_TIME_REGEX","columnIndices","daysAndTimeCaptureGroups","CourseParser","rawInput","fuzzyCourseMatches","match","eventModels","columns","split","daysAndTimeMatch","eventModel","trim","parseCourseDays","daysArray","charAt","EXAM_REGEX","RegExp","source","captureGroups","ExamParser","parsedCourses","courseToLocationMap","reduce","map","course","examMatch","exec","courseName","rawLocation","AsyncButtonCalendars","EventTableOptions","calendars","getIsLoggedIn","fetchCalendars","setCalendarList","calendarSelectChanged","nextProps","nextLoggedIn","calendarApi","getIsSignedIn","getCalendarList","newCalendars","changeEvent","onCalendarSelected","matchingCalendar","find","id","target","selectedCalendarValue","selectedCalendar","calendarOptions","key","inputSizes","NAME","LOCATION","RowButton","loading","href","undefined","rel","onAddButtonPressed","src","alt","EventTableRow","modelChangeCallback","onModelChangeRequested","trClassName","type","size","event","isRepeat","index","checked","newRepeatingDays","slice","checkboxCallback","EventTable","analytics","isAddingAll","addCustomEvent","updateOneEvent","updateAllEvents","validateOptions","addButtonPressed","addAllButtonPressed","addModelToCalendar","renderEventTableRows","customEvents","filter","newEvents","concat","newEvent","sendEvent","category","action","propsToChange","_","assign","eventShouldUpdate","NO_CALENDAR_SELECTED","PERMISSION_DENIED","getIsReadyToAdd","all","warn","createEvent","addAllButton","colSpan","App","courseParser","examParser","parsedEvents","isApiLoadError","rawInputSchedule","getInstance","api","authStatusChanged","inputScheduleChanged","sendPageView","parseCourses","parsedExams","parseExams","activeStep","authPanel","Frown","aria-label","onload","appRootContainer","document","getElementById","ua","navigator","userAgent","msie","indexOf","trident","isInternetExplorer","alert","style","textAlign","display","ReactDOM"],"mappings":"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","file":"static/js/main.9d7e2558.chunk.js","sourcesContent":["import * as React from \"react\";\r\n\r\ninterface ErrorButtonProps {\r\n    /**\r\n     * Tooltip for the button.\r\n     */\r\n    tooltip?: string;\r\n\r\n    /**\r\n     * Callback when button is clicked.\r\n     */\r\n    onClick?(): void;\r\n}\r\n\r\n/**\r\n * A nice, big, red error button, with optional tooltip.  Requires jQuery and Bootstrap JS in global scope for the\r\n * tooltip.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass ErrorButton extends React.Component<ErrorButtonProps, {}> {\r\n    private button: HTMLButtonElement | null;\r\n\r\n    constructor(props: ErrorButtonProps) {\r\n        super(props);\r\n        this.button = null;\r\n    }\r\n\r\n    /**\r\n     * Initializes the tooltip.\r\n     * \r\n     * @override\r\n     */\r\n    componentDidMount() {\r\n        this.initTooltip();\r\n    }\r\n\r\n    /**\r\n     * Reinitalizes the tooltip if it has changed.\r\n     * \r\n     * @param {ErrorButtonProps} prevProps - props that the component used to have\r\n     * @override\r\n     */\r\n    componentDidUpdate(prevProps: ErrorButtonProps) {\r\n        if (this.props.tooltip !== prevProps.tooltip) {\r\n            this.initTooltip();\r\n        }\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        if (this.button) {\r\n            $(this.button).tooltip(\"dispose\");\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @return {JSX.Element} the button\r\n     */\r\n    render(): JSX.Element {\r\n        return (\r\n        <button\r\n            onClick={this.props.onClick}\r\n            className=\"btn btn-danger\"\r\n            ref={(node) => this.button = node}\r\n            data-toggle={this.props.tooltip && \"tooltip\"}\r\n            data-placement={this.props.tooltip && \"top\"}\r\n            title={this.props.tooltip}\r\n        >\r\n            {/* 'times', but we use it just because it looks like a big X. */}\r\n            <i className=\"fa fa-times\" aria-hidden=\"true\" />{this.props.children}\r\n        </button>\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Initializes the tooltip, if the button has been mounted and there is a tooltip.\r\n     */\r\n    private initTooltip(): void {\r\n        if (!this.button || !this.props.tooltip) {\r\n            return;\r\n        }\r\n        $(this.button).tooltip(); // Relies on both jQuery and Bootstrap JS in global scope\r\n    }\r\n}\r\n\r\nexport default ErrorButton;\r\n","import EventInputModel from \"./EventInputModel\";\r\n\r\nconst API_SCOPE = \"https://www.googleapis.com/auth/calendar.readonly https://www.googleapis.com/auth/calendar.events\";\r\nconst DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/calendar/v3/rest\"];\r\n// https://developers.google.com/identity/protocols/googlescopes#calendarv3\r\n// https://developers.google.com/api-client-library/javascript/reference/referencedocs\r\n// https://developers.google.com/google-apps/calendar/\r\n\r\n// Alias some names so we don't have to type so much ;)\r\ninterface RequestFulfilled<T> extends gapi.client.HttpRequestFulfilled<T> {}\r\ninterface CalendarList extends gapi.client.calendar.CalendarList {}\r\ninterface CalendarListEntry extends gapi.client.calendar.CalendarListEntry {}\r\n\r\n/**\r\n * A singleton wrapper around Google's calendar API.  This class is singleton because Google's API is in global scope,\r\n * and is wrapped because Google's promises are not exactly ES6-confomant.\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class CalendarApi {\r\n    private static instancePromise: Promise<CalendarApi> | null = null;\r\n\r\n    private constructor() {}\r\n\r\n    /**\r\n     * Returns a promise for the global instance of CalendarApi.  This function will also initialize the calendar API\r\n     * the first time it is called.\r\n     * \r\n     * @return {Promise<CalendarApi>} a promise for the instance\r\n     */\r\n    static getInstance(): Promise<CalendarApi> {\r\n        if (CalendarApi.instancePromise === null) {\r\n            // Init in this function because it is async, and constructors cannot be async.\r\n            if (process.env.REACT_APP_API_KEY === undefined || process.env.REACT_APP_OAUTH_CLIENT_ID === undefined) {\r\n                throw new Error(\"Required environment variables not set during build time.  Refer to README.md for \" +\r\n                  \"more details.\");\r\n            }\r\n            if (!gapi.client) { // Should be loaded in a <script> in the HTML\r\n                throw new Error(\"Google client library is required in global scope.  Be sure it has loaded and \" +\r\n                    \"executed completely.\");\r\n            }\r\n\r\n            CalendarApi.instancePromise = new Promise<CalendarApi>((resolve, reject) => {\r\n                gapi.client.init({\r\n                    apiKey: process.env.REACT_APP_API_KEY,\r\n                    clientId: process.env.REACT_APP_OAUTH_CLIENT_ID,\r\n                    scope: API_SCOPE,\r\n                    // discoveryDocs will augment gapi with additional calendar-related methods.\r\n                    discoveryDocs: DISCOVERY_DOCS,\r\n                }).then(\r\n                    () => resolve(new CalendarApi()),\r\n                    error => reject(ApiHttpError.tryToConvert(error) || error)\r\n                );\r\n            });\r\n        }\r\n        return CalendarApi.instancePromise;\r\n    }\r\n\r\n    /**\r\n     * @return {boolean} whether the current user is signed in\r\n     */\r\n    getIsSignedIn(): boolean {\r\n        return gapi.auth2.getAuthInstance()\r\n            .currentUser.get()\r\n            .isSignedIn();\r\n    }\r\n\r\n    /**\r\n     * Requests permission from the user to access their Google calendar.  Returns a promise that resolves when the user\r\n     * grants permission, and rejects if the user denies permission or some other error happens.\r\n     * \r\n     * @return {Promise<void>} a Promise that resolves when the user is signed in\r\n     */\r\n    signIn(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            gapi.auth2.getAuthInstance().signIn().then(\r\n                resolve,\r\n                (error: any) => reject(ApiHttpError.tryToConvert(error) || error) // tslint:disable-line:no-any\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Ends the user's Google Calendar session, allowing another user to sign in.\r\n     * \r\n     * @return {Promise<void>} a Promise that resolves when the user is signed out\r\n     */\r\n    signOut(): Promise<void> {\r\n        return new Promise<void>((resolve, reject) => {\r\n            gapi.auth2.getAuthInstance().signOut().then(\r\n                resolve,\r\n                (error: any) => reject(ApiHttpError.tryToConvert(error) || error) // tslint:disable-line:no-any\r\n            );\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @return {Promise<CalendarListEntry[]>} a Promise for the user's **editable** calendars\r\n     */\r\n    getCalendarList(): Promise<CalendarListEntry[]> {\r\n        return new Promise<RequestFulfilled<CalendarList>>((resolve, reject) => {\r\n            gapi.client.calendar.calendarList.list({minAccessRole: \"writer\"}).then(\r\n                resolve,\r\n                error => reject(ApiHttpError.tryToConvert(error) || error)\r\n            );\r\n        }).then(response => response.result.items);\r\n    }\r\n\r\n    /**\r\n     * Posts an event to the specified calendar.  Returns a Promise that resolves with a URL to the created event.\r\n     * \r\n     * @param {string} calendarId - the calendar to which to add the event\r\n     * @param {EventInputModel} model - object that can generate the event request object\r\n     * @return {Promise<string>} a Promise for the URL to the created event\r\n     */\r\n    createEvent(calendarId: string, model: EventInputModel): Promise<string> {\r\n        try {\r\n            let request = gapi.client.calendar.events.insert({\r\n                calendarId: calendarId,\r\n                resource: model.generateEventObject()\r\n            });\r\n\r\n            return new Promise<string>((resolve, reject) => {\r\n                request.then(\r\n                    success => resolve(success.result.htmlLink),\r\n                    error => reject(ApiHttpError.tryToConvert(error) || error)\r\n                );\r\n            });\r\n        } catch (error) {\r\n            return Promise.reject(error);\r\n        }\r\n    }\r\n}\r\n\r\nexport default CalendarApi;\r\n\r\n////////////////\r\n// API errors //\r\n////////////////\r\n\r\n/**\r\n * Google API throws these objects.  It loosely extends {@link gapi.client.HttpRequestRejected}.\r\n */\r\ninterface GoogleError {\r\n    result: {\r\n        error: {\r\n            code: number;\r\n            errors: object[] | undefined;\r\n            message: string;\r\n        }\r\n    };\r\n    body: string; // HTTP response body\r\n    headers: {}; // Key-value pairs representing HTTP headers\r\n    status: number | null; // HTTP status\r\n    statusText: string | null;\r\n}\r\n\r\n/**\r\n * Gets, loosely, whether an object implements the {@link GoogleError} interface\r\n * \r\n * @param obj - the object to check\r\n * @return true if the object loosely implements {@link GoogleError}\r\n */\r\nfunction isGoogleErrorObject(obj: any): obj is GoogleError { // tslint:disable-line:no-any\r\n    if (typeof obj === \"object\" && \"result\" in obj) {\r\n        let result = obj.result || {};\r\n        if (\"error\" in result) {\r\n            let error = result.error;\r\n            return (typeof error.code === \"number\" && typeof error.message === \"string\");\r\n        }\r\n    }\r\n    return false;\r\n}\r\n\r\n/**\r\n * An error thrown by {@link CalendarApi} when encountering errors.  Aims to provide a friendlier interface than\r\n * Google's error objects.\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class ApiHttpError extends Error {\r\n    constructor(reason: string, statusCode: number | null | undefined) {\r\n        let preface = (statusCode != null) ? \"HTTP \" + statusCode : \"No response -- check connection\";\r\n        super(`${preface}: ${reason}`);\r\n        // tslint:disable-next-line:max-line-length\r\n        // See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        // for why we have to do this setPrototypeOf()\r\n        Object.setPrototypeOf(this, ApiHttpError.prototype);\r\n        this.name = \"ApiHttpError\";\r\n    }\r\n\r\n    /**\r\n     * Checks if an object is similar enough to a Google error object, and if so, uses the contained data to make a new\r\n     * ApiError.  Otherwise, returns null.\r\n     * \r\n     * @param obj - object from which to make a ApiHttpError\r\n     * @return {ApiHttpError | null} a new ApiError if the object was suitable, and null otherwise\r\n     */\r\n    static tryToConvert(obj: any): ApiHttpError | null { // tslint:disable-line:no-any\r\n        if (obj instanceof ApiHttpError) {\r\n            return obj;\r\n        }\r\n        if (isGoogleErrorObject(obj)) {\r\n            return new ApiHttpError(obj.result.error.message, obj.status);\r\n        }\r\n\r\n        return null;\r\n    }\r\n}\r\n","import * as React from \"react\";\r\nimport ErrorButton from \"./ErrorButton\";\r\nimport { ApiHttpError } from \"../CalendarApi\";\r\n\r\n/**\r\n * @template T - the resolution type of the Promise provided to this button\r\n */\r\ninterface AsyncButtonProps<T> {\r\n    /**\r\n     * CSS classes for the button in its normal state.\r\n     */\r\n    className?: string;\r\n\r\n    /**\r\n     * Text of the button if there is an error.  A reasonable default is provided.\r\n     */\r\n    errorContent?: string;\r\n\r\n    /**\r\n     * A function that provides a Promise to be executed when the button is clicked.\r\n     */\r\n    onClick?(): Promise<T>;\r\n\r\n    /**\r\n     * A callback for when the Promise provided by onClick resolves.  The first argument will contain the resolved\r\n     * value.\r\n     * \r\n     * @param {T} resolveValue - the value the Promise resolved with.\r\n     */\r\n    onPromiseResolved?(resolveValue: T): void;\r\n}\r\n\r\ninterface AsyncButtonState {\r\n    isLoading: boolean;\r\n    isError: boolean;\r\n    errorTooltip: string;\r\n}\r\n\r\n/**\r\n * A button that has three states -- normal, loading, and error.  Takes a function that provides a Promise as a means\r\n * of switching between these states.  While the Promise is pending, displays a disabled button.  If it rejects,\r\n * displays an error button that can retry the Promise.  Finally, if the Promise resolves, returns the button to its\r\n * normal state.\r\n * \r\n * @template T - the resolution type of the Promise provided to this button\r\n * @author Silas Hsu\r\n */\r\nclass AsyncButton<T> extends React.Component<AsyncButtonProps<T>, AsyncButtonState> {\r\n    static defaultProps = {\r\n        errorContent: \"Error - retry?\"\r\n    };\r\n\r\n    constructor(props: AsyncButtonProps<T>) {\r\n        super(props);\r\n        this.state = {\r\n            isLoading: false,\r\n            isError: false,\r\n            errorTooltip: \"\",\r\n        };\r\n        this.buttonClicked = this.buttonClicked.bind(this);\r\n    }\r\n\r\n    /**\r\n     * Calls the promise-returning function provided via props, and then executes it.  This function sets the loading\r\n     * state immediately, and also sets state when the promise resolves or rejects.\r\n     */\r\n    buttonClicked(): void {\r\n        if (!this.props.onClick) {\r\n            return;\r\n        }\r\n        this.setState({isLoading: true});\r\n        this.props.onClick()\r\n            .then((resolveValue) => {\r\n                if (this.props.onPromiseResolved) {\r\n                    this.props.onPromiseResolved(resolveValue);\r\n                }\r\n                this.setState({isLoading: false});\r\n            })\r\n            .catch((error) => {\r\n                window.console.error(error);\r\n                this.setState({\r\n                    isLoading: false,\r\n                    isError: true,\r\n                    errorTooltip: error instanceof ApiHttpError ? error.message : \"\"\r\n                });\r\n            });\r\n    }\r\n\r\n    /**\r\n     * - Normal state - renders a button with text specified by this.props.children.\r\n     * - Loading state - renders a disabled button.\r\n     * - Error state - renders an error button that can retry the promise, and has a tooltip depending on the error.\r\n     * \r\n     * @return {JSX.Element} the element to render\r\n     */\r\n    render(): JSX.Element {\r\n        if (this.state.isLoading) {\r\n            return <button className=\"btn btn-light\" disabled={true}>Working...</button>;\r\n        }\r\n        if (this.state.isError) {\r\n            return (\r\n            <ErrorButton tooltip={this.state.errorTooltip} onClick={this.buttonClicked}>\r\n                {this.props.errorContent}\r\n            </ErrorButton>\r\n            );\r\n        }\r\n        \r\n        return <button className={this.props.className} onClick={this.buttonClicked}>{this.props.children}</button>;\r\n    }\r\n}\r\n\r\nexport default AsyncButton;\r\n","import * as React from \"react\";\r\nimport AsyncButton from \"./AsyncButton\";\r\n\r\ninterface AuthPanelProps {\r\n    /**\r\n     * Whether the user is signed in or not.\r\n     */\r\n    isSignedIn: boolean;\r\n\r\n    /**\r\n     * Called when an API sign in is requested.\r\n     */\r\n    onSignInRequested?(): Promise<void>;\r\n\r\n    /**\r\n     * Called when an API sign in is requested.\r\n     */\r\n    onSignOutRequested?(): Promise<void>;\r\n\r\n    /**\r\n     * Called when onSignInRequested or onSignOutRequested has resolved.\r\n     */\r\n    onAuthChangeComplete?(): void;\r\n}\r\n\r\n/**\r\n * An AsyncButton with specific type void.  Aliased because we cannot specify it in JSX.\r\n */\r\nclass AsyncButtonVoid extends AsyncButton<void> {}\r\n\r\n/**\r\n * Component presenting buttons for logging in and out of Calendar API.\r\n * \r\n * @param {AuthPanelProps} props\r\n * @return {JSX.Element} component to render\r\n * @author Silas Hsu\r\n */\r\nfunction AuthPanel(props: AuthPanelProps): JSX.Element {\r\n    if (!props.isSignedIn) {\r\n        return (\r\n        <div>\r\n            <p>Click the button to grant access to your Google calendar.</p>\r\n            <AsyncButtonVoid\r\n                className=\"btn btn-primary\"\r\n                onClick={props.onSignInRequested}\r\n                onPromiseResolved={props.onAuthChangeComplete}\r\n                errorContent=\"Permission failed - retry?\"\r\n            >\r\n                Grant permission \r\n            </AsyncButtonVoid>\r\n        </div>\r\n        );\r\n    } else {\r\n        return (\r\n        <div>\r\n            <p>You have granted access to your calendar.</p>\r\n            <AsyncButtonVoid\r\n                className=\"btn btn-light\"\r\n                onClick={props.onSignOutRequested}\r\n                onPromiseResolved={props.onAuthChangeComplete}\r\n                errorContent=\"End session failed - retry?\"\r\n            >\r\n                End session\r\n            </AsyncButtonVoid>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default AuthPanel;\r\n","import * as React from \"react\";\r\nimport \"./css/ScheduleInput.css\";\r\n\r\nconst INPUT_PLACEHOLDER = \"Go to WebSTAC >> Courses & Registration >> Class Schedule.\\n\" +\r\n    \"Then, SELECT ALL the text, including finals schedule, and copy and paste it into this box.\";\r\n\r\nconst INSTRUCTIONS_HTML = `\r\n<p>\r\n  <a href=\"https://acadinfo.wustl.edu/apps/ClassSchedule/\" target=\"_blank\">\r\n    Click here to go to your WebSTAC class schedule.\r\n  </a> Then, SELECT ALL and copy and paste everything into this text box.\r\n</p>\r\n<div class=\"modal fade\" id=\"help-modal\" >\r\n  <div class=\"modal-dialog modal-lg\" role=\"document\">\r\n    <div class=\"modal-content\">\r\n\r\n      <div class=\"modal-header\">\r\n        <h3 class=\"modal-title\" id=\"helpModalLabel\">② COPYPASTE</h3>\r\n       <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n          <span aria-hidden=\"true\">&times;</span>\r\n        </button>\r\n        </div>\r\n\r\n      <div class=\"modal-body\">\r\n        <div>\r\n          <p>\r\n            2a. Once you've logged into <a href=\"https://acadinfo.wustl.edu/\" target=\"_blank\">WebSTAC</a>, select\r\n            Courses &amp; Registration >> Class Schedule.\r\n          </p>\r\n          <img src=\"img/help1.JPG\" class=\"img-fluid\" alt=\"Select Courses and Registration >> Class Schedule\"/>\r\n        </div>\r\n        <div style=\"margin-top: 30px\">\r\n          <p>2b. <b>Easy way</b>: select all (CTRL+A), and copy.  Close this dialogue and paste into the text box.</p>\r\n          <p><b>Important:</b> make sure you copied your schedule in LIST view, not grid view.</p>\r\n          <img src=\"img/help2.gif\" class=\"img-fluid\" alt=\"Copy the entire table\"/>\r\n        </div>\r\n      </div>\r\n\r\n      <div class=\"modal-footer\">\r\n        <button type=\"button\" class=\"btn btn-secondary\" data-dismiss=\"modal\">OK</button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</div>\r\n<p><button class=\"btn btn-secondary\" data-toggle=\"modal\" data-target=\"#help-modal\">More help</button></p>\r\n`;\r\n\r\ninterface ScheduleInputProps {\r\n    /**\r\n     * The current contents of the input box.\r\n     */\r\n    value?: string;\r\n\r\n    /**\r\n     * The number of events parsed from the input.\r\n     */\r\n    numEventsParsed?: number;\r\n\r\n    /**\r\n     * Callback for when the user modifies the input box.\r\n     */\r\n    onChange?(event: React.ChangeEvent<HTMLTextAreaElement>): void;\r\n}\r\n\r\n/**\r\n * Component that contains a box for pasting class and finals schedule, as well as instructions on how and feedback on\r\n * parse results.  The input box is completely controlled; the parent must pass the current contents via props.\r\n * \r\n * @param {ScheduleInputProps} props\r\n */\r\nfunction ScheduleInput(props: ScheduleInputProps): JSX.Element {\r\n    let textareaClassName = \"ScheduleInput-input-box\";\r\n    let parseNotice = null;\r\n    if (props.value) {\r\n        const numParsed = props.numEventsParsed || 0;\r\n        if (numParsed > 0) {\r\n            textareaClassName += \" ScheduleInput-success-border\";\r\n            parseNotice = <ParseSuccessNotice numEvents={numParsed} />;\r\n        } else {\r\n            textareaClassName += \" ScheduleInput-failed-border\";\r\n            parseNotice = parseFailedNotice;\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <div>\r\n            <div dangerouslySetInnerHTML={{__html: INSTRUCTIONS_HTML}} />\r\n            <textarea\r\n                className={textareaClassName}\r\n                placeholder={INPUT_PLACEHOLDER}\r\n                value={props.value}\r\n                onChange={props.onChange}\r\n            />\r\n        {parseNotice}\r\n        </div>\r\n    );\r\n}\r\n\r\n/**\r\n * An alert for a successful parse of the user's schedule.\r\n * \r\n * @param {object} props\r\n * @param {number} props.numEvents - the number of events that were parsed successfully.\r\n * @return {JSX.Element} the element to render\r\n */\r\nfunction ParseSuccessNotice(props: {numEvents: number}): JSX.Element {\r\n    return (\r\n    <div className=\"alert alert-success ScheduleInput-notice\" role=\"alert\">\r\n        {props.numEvents} events found!  Scroll down to confirm additions to calendar.\r\n        <br/>\r\n        <i className=\"fa fa-arrow-down ScheduleInput-arrow\" aria-hidden=\"true\" />\r\n    </div>\r\n    );\r\n}\r\n\r\n/**\r\n * An alert for a failed parse of the user's schedule.\r\n */\r\nconst parseFailedNotice = (\r\n    <div className=\"alert alert-danger ScheduleInput-notice ScheduleInput-parse-failed\" role=\"alert\">\r\n        <p>We weren't able to detect any of your classes or finals.</p>\r\n        <ul>\r\n            <li>Be sure you're pasting your entire class schedule, including Course IDs.</li>\r\n            <li>You could be using an unsupported browser.  Try copying WebSTAC from the desktop version of Chrome,\r\n              Firefox, Safari, Opera, or Edge.</li>\r\n        </ul>\r\n    </div>\r\n);\r\n\r\nexport default ScheduleInput;\r\n","import * as ReactGA from \"react-ga\";\r\n\r\nconst TRACKING_ID = \"UA-58192647-1\";\r\nconst IS_PRODUCTION = process.env.NODE_ENV === \"production\";\r\n\r\n/**\r\n * Wrapper for Google Analytics.  Handles initialization and only sends events if the environment is production.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass Analytics {\r\n    private static isInitialized = false;\r\n\r\n    /**\r\n     * Makes a new Analytics object.  Will initialize Google Analytics, but only on first call to this constructor.\r\n     */\r\n    constructor() {\r\n        if (!Analytics.isInitialized && IS_PRODUCTION) {\r\n            ReactGA.initialize(TRACKING_ID);\r\n            ReactGA.set({anonymizeIp: true});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sends a page view event.\r\n     * \r\n     * @param {string} path - relative path of the page\r\n     */\r\n    sendPageView(path: string) {\r\n        if (IS_PRODUCTION) {\r\n            ReactGA.pageview(path);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Record user interaction.  See https://github.com/react-ga/react-ga#reactgaeventargs\r\n     */\r\n    sendEvent(args: ReactGA.EventArgs) {\r\n        if (IS_PRODUCTION) {\r\n            ReactGA.event(args);\r\n        }\r\n    }\r\n}\r\n\r\nexport default Analytics;\r\n","import moment from \"moment\";\r\n\r\nexport interface Semester {\r\n    name: string;\r\n\r\n    /**\r\n     * Start date of the semester; i.e. the first day of classes\r\n     */\r\n    startDate: moment.Moment;\r\n\r\n    /**\r\n     * This will be used in the calendar request's recurrance field.  It should be set to the day AFTER classes end.\r\n     */\r\n    endDate: moment.Moment; \r\n}\r\n\r\nexport const semester: Semester = {\r\n    name: \"SP20\",\r\n    startDate: moment(\"2020-01-13\", \"YYYY-MM-DD\", true),\r\n    endDate: moment(\"2020-04-25\", \"YYYY-MM-DD\", true),\r\n};\r\n\r\nif (!semester.startDate.isValid() || !semester.endDate.isValid() || semester.endDate.isBefore(semester.startDate)) {\r\n    throw new Error(\"Semester dates are invalid\");\r\n}\r\n\r\nexport default semester;\r\n","export enum ValidationErrorReason {\r\n    PERMISSION_DENIED = \"Scroll up to step 1 and grant permission first.\",\r\n    NO_CALENDAR_SELECTED = \"Select a calendar first.\",\r\n    DATE = \"Enter a date in a supported format, like YYYY-MM-DD.\",\r\n    TIME = \"Enter a valid time (HH:MM[am/pm]).\",\r\n    END_BEFORE_START = \"End time must be AFTER start time.\",\r\n    REPEAT_REQUIRED = \"Select at least one day of the week.\",\r\n}\r\n\r\n/**\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class ValidationError extends Error {\r\n    constructor(reason: ValidationErrorReason) {\r\n        super(reason);\r\n        // tslint:disable-next-line:max-line-length\r\n        // See https://github.com/Microsoft/TypeScript/wiki/Breaking-Changes#extending-built-ins-like-error-array-and-map-may-no-longer-work\r\n        // for why we have to do this setPrototypeOf()\r\n        Object.setPrototypeOf(this, ValidationError.prototype);\r\n        this.name = \"ValidationError\";\r\n    }\r\n}\r\n\r\nexport default ValidationError;\r\n","import moment from \"moment\";\r\nimport { semester } from \"./Semester\";\r\nimport { ValidationError, ValidationErrorReason } from \"./ValidationError\";\r\n\r\n// All of these used directly or indirectly in generateEventObject()\r\nconst DATE_FORMATS = [\"MMM D YYYY\", \"YYYY-MM-DD\"];\r\nconst TIME_FORMAT = \"h:mmA\";\r\nconst RECURRANCE_DAY_STRINGS = [\"MO\", \"TU\", \"WE\", \"TH\", \"FR\", \"SA\", \"SU\"];\r\nconst RECURRANCE_END_FORMAT = \"YYYYMMDD\";\r\nconst TIME_ZONE = \"America/Chicago\";\r\nconst DESCRIPTION = \"Created by WebSTAC to Calendar\";\r\nconst REMINDERS = {\r\n    overrides: [],\r\n    useDefault: false\r\n};\r\n\r\n// Example of an ISO 8601 date: 2017-10-09T02:33:50Z\r\nconst ISO_TIME_START_INDEX = 11;\r\nconst ISO_TIME_CHARS_TO_KEEP = 8; // Should keep everything except the \"Z\"\r\n\r\nexport enum EventInputButtonState {\r\n    normal,\r\n    loading,\r\n    success,\r\n    error,\r\n}\r\n\r\n/**\r\n * Stores all the information needed to render a event's information.  Also, contains methods for generating event\r\n * objects that CalendarApi understands and can post to a user's calendar.\r\n * \r\n * @author Silas Hsu\r\n */\r\nexport class EventInputModel {\r\n    static readonly DAYS_PER_WEEK = 7;\r\n\r\n    name: string = \"\";\r\n    location: string = \"\";\r\n    \r\n    /**\r\n     * The date for this event.  This model currently only supports events that start and end on the same date.\r\n     */\r\n    date: string = \"\";\r\n    startTime: string = \"\";\r\n    endTime: string = \"\";\r\n\r\n    /**\r\n     * Whether this event is a course.  If true, imposes extra validation of repeating days and uses semester.ts's dates\r\n     * when generating event objects.\r\n     */\r\n    isCourse: boolean = true;\r\n    /**\r\n     * An array of boolean, one for each day of the week.  Monday is index 0 and Sunday is index 6.\r\n     */\r\n    repeatingDays: boolean[] = Array(EventInputModel.DAYS_PER_WEEK).fill(false);\r\n\r\n    buttonState: EventInputButtonState = EventInputButtonState.normal;\r\n    successUrl: string | null = null;\r\n    error: Error | null = null;\r\n\r\n    /**\r\n     * A flag used by EventTable.\r\n     */\r\n    isCustom: boolean = false;\r\n\r\n    /**\r\n     * @return {boolean} whether this event is repeating, i.e. if at least one repeating day is selected\r\n     */\r\n    getIsRepeating(): boolean {\r\n        return this.repeatingDays.some(day => day); // Identity function\r\n    }\r\n\r\n    /**\r\n     * @return {boolean} whether it is appropriate to upload this event to the user's calendar\r\n     */\r\n    getIsReadyToAdd(): boolean {\r\n        return this.buttonState === EventInputButtonState.normal || this.buttonState === EventInputButtonState.error;\r\n    }\r\n\r\n    /**\r\n     * Gets this event's date as a parsed Moment object.  If this event is a student's course, statically uses the\r\n     * semester's start date as this event's day, no matter the value of `this.date`.\r\n     * \r\n     * This method takes into consideration repeating days, moving the event forward to the nearest day selected for\r\n     * repeat.  For example, if the event's date is on a Monday, but it is set to only repeat on Wednesdays and Fridays,\r\n     * the returned data will express that the event's date is Wednesday.\r\n     * \r\n     * Note that the returned date may be invalid; use moment.js's isValid() method to check.\r\n     * \r\n     * @return {moment.Moment} this event's date\r\n     */\r\n    getDate(): moment.Moment {\r\n        let date = this.isCourse ? semester.startDate.clone() : moment(this.date, DATE_FORMATS, true);\r\n        // isoWeekday() has Monday = 1 and Sunday = 7.  Convert to our indexing.\r\n        let dateDayOfWeek = date.isoWeekday() - 1;\r\n        let dayOffset = this.daysUntilNextRepeatingDay(dateDayOfWeek);\r\n        if (dayOffset > 0) {\r\n            date.add(dayOffset, \"days\");\r\n        }\r\n        return date;\r\n    }\r\n\r\n    /**\r\n     * Generates a data blob that Google understands and can be posted to a user's calendar.  Dates and times require\r\n     * parsing, and other restrictions exist, so this method potentially throws ValidationError.\r\n     * \r\n     * @return {gapi.client.calendar.EventInput} object suitable for addition to Google calendar\r\n     * @throws {ValidationError}\r\n     */\r\n    generateEventObject(): gapi.client.calendar.EventInput {\r\n        let {startDateTime, endDateTime} = this.generateStartEndTimes();\r\n        return {\r\n            summary: this.name,\r\n            location: this.location,\r\n            start: {\r\n                dateTime: startDateTime,\r\n                timeZone: TIME_ZONE\r\n            },\r\n            end: {\r\n                dateTime: endDateTime,\r\n                timeZone: TIME_ZONE\r\n            },\r\n            recurrence: this.generateRecurrence(),\r\n            description: DESCRIPTION,\r\n            reminders: REMINDERS,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts this event's date, start time, and end time into a format that Google understands.  If parsing fails or\r\n     * end time is before start time, throws ValidationError.\r\n     * \r\n     * @return {object} startEndTimes - parsed data\r\n     * @return {string} startDateTime - start date and time of the event\r\n     * @return {string} endDateTime - end date and time of the event\r\n     * @throws {ValidationError}\r\n     */\r\n    protected generateStartEndTimes() {\r\n        const date = this.getDate();\r\n        if (!date.isValid()) {\r\n            throw new ValidationError(ValidationErrorReason.DATE);\r\n        }\r\n        const startTime = moment.utc(this.startTime, TIME_FORMAT, true);\r\n        const endTime = moment.utc(this.endTime, TIME_FORMAT, true);\r\n        if (!startTime.isValid() || !endTime.isValid()) {\r\n            throw new ValidationError(ValidationErrorReason.TIME);\r\n        }\r\n        if (endTime.isBefore(startTime)) {\r\n            throw new ValidationError(ValidationErrorReason.END_BEFORE_START);\r\n        }\r\n\r\n        const dateISOString = date.toISOString().substring(0, ISO_TIME_START_INDEX);\r\n        const startTimeISOString = startTime.toISOString().substr(ISO_TIME_START_INDEX, ISO_TIME_CHARS_TO_KEEP);\r\n        const endTimeISOString = endTime.toISOString().substr(ISO_TIME_START_INDEX, ISO_TIME_CHARS_TO_KEEP); \r\n        return {\r\n            startDateTime: dateISOString + startTimeISOString,\r\n            endDateTime: dateISOString + endTimeISOString,\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Converts this event's repeating days into a format Google understands.  Statically uses the semester's end date\r\n     * as the end of the repeat.  Throws ValidationError if this event is a course but not repeating.\r\n     * \r\n     * @return {string[]} an array of string containing the event's repeating days.\r\n     * @throws {ValidationError} if this event is a course but not repeating.\r\n     */\r\n    protected generateRecurrence(): string[] {\r\n        if (this.isCourse && !this.getIsRepeating()) { // Courses need a repeat set!\r\n            throw new ValidationError(ValidationErrorReason.REPEAT_REQUIRED);\r\n        }\r\n\r\n        let stringDays = [];\r\n        for (let i = 0; i < this.repeatingDays.length; i++) {\r\n            if (this.repeatingDays[i]) {\r\n                stringDays.push(RECURRANCE_DAY_STRINGS[i]);\r\n            }\r\n        }\r\n\r\n        if (stringDays.length > 0) {\r\n            const endRepeat = semester.endDate.format(RECURRANCE_END_FORMAT);\r\n            return [`RRULE:FREQ=WEEKLY;UNTIL=${endRepeat};BYDAY=${stringDays.join(\",\")}`];\r\n        } else {\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Starting from `afterDay` (with Monday = 0), counts forward the number of days until the first day of the week\r\n     * that is repeating.  Returns the number of days counted forward.  Returns -1 if there are no repeating days.\r\n     *\r\n     * Examples:\r\n     *   - MW repeating, afterDayOfWeek = 0 --> returns 0\r\n     *   - MW repeating, afterDayOfWeek = 2 --> returns 0\r\n     *   - M repeating, afterDayOfWeek = 4 --> returns 3\r\n     */\r\n    protected daysUntilNextRepeatingDay(afterDay: number) {\r\n        let dayIndex = afterDay;\r\n        for (let i = 0; i < EventInputModel.DAYS_PER_WEEK; i++) {\r\n            if (this.repeatingDays[dayIndex]) {\r\n                return i;\r\n            }\r\n            dayIndex = (dayIndex + 1) % 7;\r\n        }\r\n        return -1;\r\n    }\r\n}\r\n\r\nexport default EventInputModel;\r\n","import EventInputModel from \"./EventInputModel\";\r\n\r\n/*\r\nA course looks like this:\r\nE81 CSE 515T 01\tBayesian Methods in Machine Learning\t3.0\tC\t-T-R--- 2:30p-4:00p\tWhitaker / 218\tGarnett\r\n*/\r\nconst COURSE_REGEX = /[A-Z]\\d\\d.+/g; // Match something that looks like department letter and course number\r\n// Something that looks like \"M-W---- 10:00a-11:30p\"\r\nconst DAYS_AND_TIME_REGEX = /([\\w-]+) (\\d\\d?:\\d\\d[ap])-(\\d\\d?:\\d\\d[ap])/;\r\nconst DAYS_PER_WEEK = EventInputModel.DAYS_PER_WEEK;\r\n\r\nconst columnIndices = {\r\n    MIN_EXPECTED: 5,\r\n    NAME: 1,\r\n    DAYS_AND_TIME: 4,\r\n    LOCATION: 5\r\n};\r\n\r\nconst daysAndTimeCaptureGroups = {\r\n    DAYS: 1,\r\n    START_TIME: 2,\r\n    END_TIME: 3,\r\n};\r\n\r\n/**\r\n * Parses courses from WebSTAC.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass CourseParser {\r\n    /**\r\n     * Parses courses from WebSTAC, returning them in an array of EventInputModel.  Returns an empty array if no courses\r\n     * could be parsed.\r\n     * \r\n     * @param {string} rawInput - class schedule copy-pasted from WebSTAC\r\n     * @return {EventInputModel[]} array of parsed courses\r\n     */\r\n    parseCourses(rawInput: string): EventInputModel[] {\r\n        let fuzzyCourseMatches = rawInput.match(COURSE_REGEX);\r\n        if (!fuzzyCourseMatches) {\r\n            return [];\r\n        }\r\n\r\n        let eventModels = [];\r\n        for (let fuzzyCourseMatch of fuzzyCourseMatches) {\r\n            let columns = fuzzyCourseMatch.split(\"\\t\");\r\n            if (columns.length < columnIndices.MIN_EXPECTED) {\r\n                continue;\r\n            }\r\n\r\n            let daysAndTimeMatch = columns[columnIndices.DAYS_AND_TIME].match(DAYS_AND_TIME_REGEX) || [];\r\n\r\n            let eventModel = new EventInputModel();\r\n            eventModel.isCourse = true;\r\n            eventModel.name = columns[columnIndices.NAME].trim() || \"\";\r\n            eventModel.location = columns[columnIndices.LOCATION] || \"\";\r\n            eventModel.repeatingDays = this.parseCourseDays(daysAndTimeMatch[daysAndTimeCaptureGroups.DAYS] || \"\");\r\n            eventModel.startTime = daysAndTimeMatch[daysAndTimeCaptureGroups.START_TIME] || \"\";\r\n            eventModel.endTime = daysAndTimeMatch[daysAndTimeCaptureGroups.END_TIME] || \"\";\r\n            \r\n            eventModels.push(eventModel);\r\n        }\r\n        return eventModels;\r\n    }\r\n\r\n    /**\r\n     * Something that looks like \"M-W----\"\r\n     * @param {string} rawInput a WebSTAC days-of-the-week string\r\n     * @return {boolean[]}\r\n     */\r\n    private parseCourseDays(rawInput: string): boolean[] {\r\n        let daysArray = Array(DAYS_PER_WEEK).fill(false);\r\n        if (rawInput.length === DAYS_PER_WEEK) {\r\n            for (let i = 0; i < DAYS_PER_WEEK; i++) {\r\n                // I'm not going to check if the letter is the right one for the position, since I'm not sure what\r\n                // WebSTAC uses for Saturday and Sunday.\r\n                if (rawInput.charAt(i) !== \"-\") { \r\n                    daysArray[i] = true;\r\n                }\r\n            }\r\n        }\r\n        return daysArray;\r\n    }\r\n}\r\n\r\nexport default CourseParser;\r\n","import EventInputModel from \"./EventInputModel\";\r\n\r\n/*\r\nAn exam looks like this; it takes up two lines:\r\n\r\nMay 5 2017 6:00PM - 8:00PM\tE81 CSE 431S 01\tTranslation of Computer Languages\r\nExam Building / Room:\tSame / Same\r\n*/\r\n\r\n// I'm only putting months in which I expect finals\r\nconst DATE_TIME_REGEX = /((Apr|May|Jun|Jul|Aug|Dec) \\d\\d? \\d\\d\\d\\d) (\\d\\d?:\\d\\d[AP]M) - (\\d\\d?:\\d\\d[AP]M)\\t/;\r\nconst NAME_REGEX = /.+\\t(.+)/; // Strings separated by a tab\r\nconst NEWLINE_REGEX = /\\n(?:\\t\\n)?/; // Special since Firefox pastes things differently\r\nconst LOCATION_REGEX = /Exam Building \\/ Room:\\t(.+)/;\r\nconst EXAM_REGEX = new RegExp(\r\n    DATE_TIME_REGEX.source + NAME_REGEX.source + NEWLINE_REGEX.source + LOCATION_REGEX.source,\r\n    \"g\"\r\n);\r\n\r\nconst captureGroups = {\r\n    DATE: 1,\r\n    START_TIME: 3,\r\n    END_TIME: 4,\r\n    NAME: 5,\r\n    LOCATION: 6,\r\n};\r\n\r\n/**\r\n * Parses final exams.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass ExamParser {\r\n    /**\r\n     * Parses exams from WebSTAC, returning them in an array of EventInputModel.  Optionally takes an array of parsed\r\n     * courses which will be used to get locations for exams that are in the same location as the class. Returns an\r\n     * empty array if no exams could be parsed.\r\n     * \r\n     * @param {string} rawInput - class schedule copy-pasted from WebSTAC\r\n     * @param {EventInputModel[]} [parsedCourses] - clues for determining exam locations\r\n     * @return {EventInputModel[]} array of parsed exams\r\n     */\r\n    parseExams(rawInput: string, parsedCourses: EventInputModel[] = []): EventInputModel[] {\r\n        let courseToLocationMap: object = parsedCourses.reduce((map, course) => {\r\n            map[course.name] = course.location;\r\n            return map;\r\n        }, {}); // tslint:disable-line:align\r\n\r\n        let eventModels = [];\r\n        let examMatch = EXAM_REGEX.exec(rawInput);\r\n        while (examMatch !== null) {\r\n            let eventModel = new EventInputModel();\r\n            eventModel.isCourse = false;\r\n\r\n            let courseName = examMatch[captureGroups.NAME];\r\n            eventModel.name = courseName + \" Final\";\r\n\r\n            let rawLocation = examMatch[captureGroups.LOCATION];\r\n            if (rawLocation === \"Same / Same\") {\r\n                eventModel.location = courseToLocationMap[courseName] || rawLocation;\r\n            } else {\r\n                eventModel.location = rawLocation;\r\n            }\r\n            \r\n            eventModel.date = examMatch[captureGroups.DATE];\r\n            eventModel.startTime = examMatch[captureGroups.START_TIME];\r\n            eventModel.endTime = examMatch[captureGroups.END_TIME];\r\n            \r\n            eventModels.push(eventModel);\r\n            examMatch = EXAM_REGEX.exec(rawInput);\r\n        }\r\n\r\n        return eventModels;\r\n    }\r\n}\r\n\r\nexport default ExamParser;\r\n","import * as React from \"react\";\r\nimport AsyncButton from \"./AsyncButton\";\r\nimport CalendarApi from \"../CalendarApi\";\r\nimport semester from \"../Semester\";\r\n\r\nimport \"./css/EventTableOptions.css\";\r\n\r\ninterface Calendar extends gapi.client.calendar.CalendarListEntry {} // Just an alias\r\n\r\ninterface EventTableOptionsProps {\r\n    /**\r\n     * Used for fetching calendar lists.\r\n     */\r\n    calendarApi?: CalendarApi;\r\n\r\n    /**\r\n     * The currently selected calendar.\r\n     */\r\n    selectedCalendar: Calendar | null;\r\n\r\n    /**\r\n     * Callback for when a calendar is selected.\r\n     */\r\n    onCalendarSelected?(calendar: Calendar | null): void;\r\n}\r\n\r\ninterface EventTableOptionsState {\r\n    /**\r\n     * Current calendar options among which to select.\r\n     */\r\n    calendars: Calendar[];\r\n}\r\n\r\n/**\r\n * An AsyncButton with specific type Calendar[].  Aliased because we cannot specify it in JSX.\r\n */\r\nclass AsyncButtonCalendars extends AsyncButton<Calendar[]> {}\r\n\r\n/**\r\n * Manages calendar and semester <select>s for EventTable.  This component manages available calendar options, but the \r\n * selected option is stored in a parent.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass EventTableOptions extends React.Component<EventTableOptionsProps, EventTableOptionsState> {\r\n    /**\r\n     * Not only initializes state and binds methods, but also immediately fetches calendars, if possible\r\n     * \r\n     * @param {EventTableOptionsProps} props\r\n     */\r\n    constructor(props: EventTableOptionsProps) {\r\n        super(props);\r\n        this.state = {\r\n            calendars: []\r\n        };\r\n        this.getIsLoggedIn = this.getIsLoggedIn.bind(this);\r\n        this.fetchCalendars = this.fetchCalendars.bind(this);\r\n        this.setCalendarList = this.setCalendarList.bind(this);\r\n        this.calendarSelectChanged = this.calendarSelectChanged.bind(this);\r\n        if (this.getIsLoggedIn()) {\r\n            this.fetchCalendars().then(this.setCalendarList);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * If props change from logged in to logged out, clears the calendar options.  If props change from being logged out\r\n     * to logged in, fetches a new calendar option list.\r\n     * \r\n     * @param nextProps - next props the component will receive\r\n     */\r\n    componentWillReceiveProps(nextProps: EventTableOptionsProps): void {\r\n        let nextLoggedIn = this.getIsLoggedIn(nextProps.calendarApi);\r\n        if (this.state.calendars.length === 0 && nextLoggedIn) { // We don't have calendars and logged in\r\n            this.fetchCalendars(nextProps.calendarApi).then(this.setCalendarList);\r\n        } else if (this.state.calendars.length > 0 && !nextLoggedIn) { // We have calendars and logged out\r\n            this.setState({calendars: []});\r\n        }\r\n        // We have calendars and logged in: do nothing\r\n        // We don't have calendars and logged out: do nothing\r\n    }\r\n\r\n    /**\r\n     * Gets whether the input API (default this.props.calendarApi) is logged in.  If given undefined, returns false.\r\n     * \r\n     * @param {CalendarApi} [calendarApi=this.props.calendarApi] - the API to check\r\n     */\r\n    getIsLoggedIn(calendarApi: CalendarApi | undefined = this.props.calendarApi): boolean {\r\n        return calendarApi ? calendarApi.getIsSignedIn() : false;\r\n    }\r\n\r\n    /**\r\n     * Fetches the user's calendar list using the given API.  If given undefined, returns a Promise resolved with empty\r\n     * array.\r\n     * \r\n     * @param {CalendarApi} [calendarApi=this.props.calendarApi] - the API used to fetch calendars\r\n     * @return {Promise<Calendar[]>} Promise for the user's calendar list\r\n     */\r\n    fetchCalendars(calendarApi: CalendarApi | undefined = this.props.calendarApi): Promise<Calendar[]> {\r\n        if (calendarApi) {\r\n            return calendarApi.getCalendarList();\r\n        } else {\r\n            return Promise.resolve([]);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets this component's calendar option list, but only if the user is still logged in, since it's possible for data\r\n     * to come in after the user has logged out.\r\n     * \r\n     * @param {Calendar[]} newCalendars - new calendar option list\r\n     */\r\n    setCalendarList(newCalendars: Calendar[]): void {\r\n        if (this.getIsLoggedIn()) {\r\n            this.setState({calendars: newCalendars});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for when the component's calendar <select> changes.  Coverts the change event to a Calendar object to\r\n     * pass to the parent.\r\n     * \r\n     * @param {React.ChangeEvent<HTMLSelectElement>} changeEvent - React change event from the calendar <select>\r\n     */\r\n    calendarSelectChanged(changeEvent: React.ChangeEvent<HTMLSelectElement>): void {\r\n        if (this.props.onCalendarSelected) {\r\n            let matchingCalendar = this.state.calendars.find(calendar => calendar.id === changeEvent.target.value);\r\n            this.props.onCalendarSelected(matchingCalendar || null);\r\n        }\r\n    }\r\n\r\n    render(): JSX.Element {\r\n        let selectedCalendarValue = this.props.selectedCalendar ? this.props.selectedCalendar.id : \"\";\r\n        let calendarOptions = this.state.calendars.map(calendar =>\r\n            <option key={calendar.id} value={calendar.id}>{calendar.summary}</option>\r\n        );\r\n\r\n        return (\r\n        <div className=\"EventTableOptions\">\r\n            <div className=\"EventTableOptions-row\">\r\n                <label>Select semester:</label>\r\n                <select>\r\n                    <option key={semester.name} value={semester.name}>{semester.name}</option>\r\n                </select>\r\n            </div>\r\n            <div className=\"EventTableOptions-row\">\r\n                <label>Select calendar:</label>\r\n                <select value={selectedCalendarValue} onChange={this.calendarSelectChanged}>\r\n                    <option value=\"\">Select a calendar...</option>\r\n                    {calendarOptions}\r\n                </select>\r\n                <span className=\"EventTableOptions-refresh-list-button\">\r\n                {\r\n                    this.getIsLoggedIn() ?\r\n                        <AsyncButtonCalendars\r\n                            className=\"btn btn-secondary\"\r\n                            onClick={this.fetchCalendars}\r\n                            onPromiseResolved={this.setCalendarList}\r\n                        >\r\n                            Refresh list\r\n                        </AsyncButtonCalendars>\r\n                        :\r\n                        null\r\n                    }\r\n                </span>\r\n            </div>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventTableOptions;\r\n","import * as React from \"react\";\r\nimport ErrorButton from \"./ErrorButton\";\r\nimport { ApiHttpError } from \"../CalendarApi\";\r\nimport { EventInputModel, EventInputButtonState } from \"../EventInputModel\";\r\nimport ValidationError from \"../ValidationError\";\r\n\r\nimport \"./css/EventTableRow.css\";\r\n\r\ninterface EventTableRowProps {\r\n    /**\r\n     * Object containing all the information needed to render.\r\n     */\r\n    model: EventInputModel;\r\n\r\n    /**\r\n     * Called when the user modified any of the inputs in the row.\r\n     * \r\n     * @param {Pick<EventInputModel, K>} propsToChange - props that should be merged into the model passed via props\r\n     */\r\n    onModelChangeRequested?<K extends keyof EventInputModel>(propsToChange: Pick<EventInputModel, K>): void;\r\n\r\n    /**\r\n     * Called when the user presses the row's \"add to calendar\" button.\r\n     */\r\n    onAddButtonPressed?(): void;\r\n}\r\n\r\nconst inputSizes = {\r\n    DATE: 9,\r\n    TIME: 5,\r\n    NAME: 35,\r\n    LOCATION: 30\r\n};\r\n\r\n/**\r\n * Renders a single row of EventTable.  This component is completely controlled.\r\n * \r\n * @param {EventTableRowProps} props\r\n * @author Silas Hsu\r\n */\r\nfunction EventTableRow(props: EventTableRowProps): JSX.Element {\r\n    const model = props.model;\r\n    const modelChangeCallback = props.onModelChangeRequested || (() => undefined);\r\n\r\n    const checkboxCallback = function(index: number, value: boolean) {\r\n        let newRepeatingDays = props.model.repeatingDays.slice();\r\n        newRepeatingDays[index] = value;\r\n        modelChangeCallback({repeatingDays: newRepeatingDays});\r\n    };\r\n\r\n    const renderCheckboxes = function() {\r\n        return model.repeatingDays.map((isRepeat, index) => (\r\n            <input\r\n                type=\"checkbox\"\r\n                key={index}\r\n                checked={isRepeat}\r\n                onChange={event => checkboxCallback(index, event.target.checked)}\r\n            />)\r\n        );\r\n    };\r\n\r\n    let trClassName = \"EventTableRow\";\r\n    if (!model.isCourse) {\r\n        trClassName += \" EventTableRow-final\";\r\n    }\r\n    return (\r\n    <tr className={trClassName}>\r\n        <td> {/* Name */}\r\n            <input\r\n                type=\"text\"\r\n                className=\"EventTableRow-full-width\"\r\n                value={model.name}\r\n                size={inputSizes.NAME}\r\n                onChange={event => modelChangeCallback({name: event.target.value})}\r\n            />\r\n        </td>\r\n        <td>\r\n        { \r\n            props.model.isCourse ? // Course: checkboxes for repeating days\r\n                renderCheckboxes() \r\n                : // Otherwise: date input\r\n                <input\r\n                    type=\"text\"\r\n                    value={model.date}\r\n                    size={inputSizes.DATE}\r\n                    onChange={event => modelChangeCallback({date: event.target.value})}\r\n                />\r\n        }\r\n        </td>\r\n        <td> {/* Start and end times */}\r\n            <input \r\n                type=\"text\"\r\n                value={model.startTime}\r\n                size={inputSizes.TIME}\r\n                onChange={event => modelChangeCallback({startTime: event.target.value})}\r\n            />\r\n            -\r\n            <input\r\n                type=\"text\"\r\n                value={model.endTime}\r\n                size={inputSizes.TIME}\r\n                onChange={event => modelChangeCallback({endTime: event.target.value})}\r\n            />\r\n        </td>\r\n        <td> {/* Location */}\r\n            <input\r\n                type=\"text\"\r\n                className=\"EventTableRow-full-width\"\r\n                value={model.location}\r\n                size={inputSizes.LOCATION}\r\n                onChange={event => modelChangeCallback({location: event.target.value})}\r\n            />\r\n        </td>\r\n        <td><RowButton {...props} /></td>\r\n    </tr>\r\n    );\r\n}\r\n\r\n/**\r\n * Renders the button under the \"Add to calendar\" column.\r\n * \r\n * @param {EventTableRowProps} props - same props passed to EventTableRow\r\n */\r\nfunction RowButton(props: EventTableRowProps): JSX.Element {\r\n    switch (props.model.buttonState) {\r\n        case EventInputButtonState.loading:\r\n            return <button className=\"btn btn-light\" disabled={true}>Working...</button>;\r\n        case EventInputButtonState.success:\r\n            return (\r\n            <a \r\n                className=\"btn btn-success\"\r\n                href={props.model.successUrl || undefined}\r\n                target=\"_blank\"\r\n                rel=\"noopener noreferrer\"\r\n            >\r\n                <i className=\"fa fa-check\" aria-hidden=\"true\" />Added!\r\n            </a>\r\n            );\r\n        case EventInputButtonState.error:\r\n            const error = props.model.error;\r\n            let tooltip;\r\n            if (error instanceof ValidationError || error instanceof ApiHttpError) {\r\n                tooltip = \"Couldn't post event: \" + error.message;\r\n            } else {\r\n                tooltip = \"Unexpected error (bug?) -- Check developers' console for technical details.\";\r\n                if (error == null) {\r\n                    window.console.error(\r\n                        \"Button state was set to error, but model.error is empty.  Are you setting state correctly?\"\r\n                    );\r\n                }\r\n            }\r\n            return <ErrorButton tooltip={tooltip} onClick={props.onAddButtonPressed}>Failed - retry?</ErrorButton>;\r\n        case EventInputButtonState.normal:\r\n        default:\r\n            return <button onClick={props.onAddButtonPressed}>\r\n                <img src=\"img/gcbutton.gif\" alt=\"Add to Google Calendar\"/>\r\n            </button>;\r\n    }\r\n}\r\n\r\nexport default EventTableRow;\r\n","import * as React from \"react\";\r\nimport * as _ from \"lodash\";\r\n\r\nimport EventTableOptions from \"./EventTableOptions\";\r\nimport EventTableRow from \"./EventTableRow\";\r\n\r\nimport Analytics from \"../Analytics\";\r\nimport { CalendarApi } from \"../CalendarApi\";\r\nimport { EventInputModel, EventInputButtonState } from \"../EventInputModel\";\r\nimport { ValidationError, ValidationErrorReason } from \"../ValidationError\";\r\n\r\nimport \"./css/EventTable.css\";\r\n\r\ninterface EventTableProps {\r\n    /**\r\n     * Events for the table to display.\r\n     */\r\n    events: EventInputModel[];\r\n\r\n    /**\r\n     * API for adding events to the user's calendar.\r\n     */\r\n    calendarApi?: CalendarApi;\r\n}\r\n\r\ninterface EventTableState {\r\n    /**\r\n     * All events the table is displaying.  Forked from props.events, since the user can modify them.\r\n     */\r\n    events: EventInputModel[];\r\n\r\n    /**\r\n     * The calendar to which the user wishes to add events.\r\n     */\r\n    selectedCalendar: gapi.client.calendar.CalendarListEntry | null;\r\n\r\n    /**\r\n     * After pressing the \"add all\" button, whether requests are still in flight.\r\n     */\r\n    isAddingAll: boolean;\r\n}\r\n\r\n/**\r\n * Table that displays events to add to Google calendar, as well as options for doing so.\r\n * \r\n * @author Silas Hsu\r\n */\r\nclass EventTable extends React.Component<EventTableProps, EventTableState> {\r\n    analytics: Analytics;\r\n\r\n    constructor(props: EventTableProps) {\r\n        super(props);\r\n        this.state = {\r\n            events: props.events,\r\n            selectedCalendar: null,\r\n            isAddingAll: false,\r\n        };\r\n        this.analytics = new Analytics();\r\n\r\n        this.addCustomEvent = this.addCustomEvent.bind(this);\r\n        this.updateOneEvent = this.updateOneEvent.bind(this);\r\n        this.updateAllEvents = this.updateAllEvents.bind(this);\r\n        this.validateOptions = this.validateOptions.bind(this);\r\n        this.addButtonPressed = this.addButtonPressed.bind(this);\r\n        this.addAllButtonPressed = this.addAllButtonPressed.bind(this);\r\n        this.addModelToCalendar = this.addModelToCalendar.bind(this);\r\n        this.renderEventTableRows = this.renderEventTableRows.bind(this);\r\n    }\r\n\r\n    /**\r\n     * If new events are incoming via props, replaces all non-custom events in the table with them.\r\n     * \r\n     * @param {EventTableProps} nextProps - next props the component will receive\r\n     */\r\n    componentWillReceiveProps(nextProps: EventTableProps): void {\r\n        if (this.props.events !== nextProps.events) {\r\n            let customEvents = this.state.events.filter(event => event.isCustom);\r\n            let newEvents = nextProps.events.concat(customEvents);\r\n            this.setState({events: newEvents});\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Adds a custom course to the table.\r\n     */\r\n    addCustomEvent(): void {\r\n        const newEvent = new EventInputModel();\r\n        newEvent.isCustom = true;\r\n\r\n        const newEvents = this.state.events.slice();\r\n        newEvents.push(newEvent);\r\n        \r\n        this.analytics.sendEvent({category: \"Buttons\", action: \"Custom event\"});\r\n        this.setState({events: newEvents});\r\n    }\r\n\r\n    /**\r\n     * Changes, without mutation, one event of this.state.events, then sets state.\r\n     * \r\n     * @param {Pick<EventInputModel, K>} propsToChange - props to merge into the event to change\r\n     * @param {number} index - the index of the event to change\r\n     */\r\n    updateOneEvent<K extends keyof EventInputModel>(propsToChange: Pick<EventInputModel, K>, index: number): void {\r\n        const newEvent = _.cloneDeep(this.state.events[index]);\r\n        if (!newEvent) {\r\n            return;\r\n        }\r\n        const newEvents = this.state.events.slice();\r\n        newEvents[index] = Object.assign(newEvent, propsToChange);\r\n        this.setState({events: newEvents});\r\n    }\r\n\r\n    /**\r\n     * @callback eventUpdateFilter\r\n     * @param {EventInputModel} model - the event to test\r\n     * @return {boolean} whether the event should update\r\n     */\r\n\r\n    /**\r\n     * Changes, without mutation, each event of this.state.events, then sets state.  Accepts a filter function so only\r\n     * certain events update.  By default, all events update.\r\n     * \r\n     * @param {Pick<EventInputModel, K>} propsToChange - props to merge into the events\r\n     * @param {eventUpdateFilter} [eventShouldUpdate=event => true] - filter for which events to update\r\n     */\r\n    updateAllEvents<K extends keyof EventInputModel>(\r\n        propsToChange: Pick<EventInputModel, K>,\r\n        eventShouldUpdate: (model: EventInputModel) => boolean = event => true\r\n    ): void {\r\n        const newEvents = this.state.events.map(event => {\r\n            if (eventShouldUpdate(event)) {\r\n                const newEvent = _.cloneDeep(event);\r\n                return Object.assign(newEvent, propsToChange);\r\n            } else {\r\n                return event;\r\n            }\r\n        });\r\n        this.setState({events: newEvents});\r\n    }\r\n\r\n    /**\r\n     * Examines state and determines if events are ready to be added to calendar.  Returns a ValidationError if there is\r\n     * a problem, and null if there is not.\r\n     * \r\n     * @return {ValidationError | null} error object if events are not ready to be added to calendar; null otherwise\r\n     */\r\n    validateOptions(): ValidationError | null {\r\n        if (!this.props.calendarApi || !this.props.calendarApi.getIsSignedIn()) {\r\n            return new ValidationError(ValidationErrorReason.PERMISSION_DENIED);\r\n        }\r\n        if (!this.state.selectedCalendar) {\r\n            return new ValidationError(ValidationErrorReason.NO_CALENDAR_SELECTED);\r\n        }\r\n        return null;\r\n    }\r\n\r\n    /**\r\n     * Callback for when a \"add to calendar\" button is pressed.  Attempts to add an event to the user's calendar.  This\r\n     * method sets state.\r\n     * \r\n     * @param {number} index - the index of the event in this.state.events to add to the user's calendar\r\n     */\r\n    addButtonPressed(index: number): void {\r\n        const event = this.state.events[index];\r\n        if (!event || !event.getIsReadyToAdd()) {\r\n            return;\r\n        }\r\n\r\n        const error = this.validateOptions();\r\n        if (error) {\r\n            this.updateOneEvent({buttonState: EventInputButtonState.error, error: error}, index);\r\n        } else {\r\n            this.updateOneEvent({buttonState: EventInputButtonState.loading, error: null}, index);\r\n            this.addModelToCalendar(index);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Callback for when the \"add all to calendar\" button is pressed.  Attempts to add all events to the user's\r\n     * calendar.  This method sets state.\r\n     */\r\n    addAllButtonPressed(): void {\r\n        const error = this.validateOptions();\r\n        if (error) {\r\n            this.updateAllEvents(\r\n                {buttonState: EventInputButtonState.error, error: error}, event => event.getIsReadyToAdd()\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.setState({isAddingAll: true});\r\n        this.updateAllEvents(\r\n            {buttonState: EventInputButtonState.loading, error: null}, event => event.getIsReadyToAdd()\r\n        );\r\n        Promise.all(this.state.events.map((event, index) => this.addModelToCalendar(index)))\r\n            .then(() => this.setState({isAddingAll: false}));\r\n    }\r\n\r\n    /**\r\n     * Calls on the CalendarApi specified through props and attempts to add an event to the user's calendar.  Returns a\r\n     * Promise that resolves when the task is finished, whether there is an error or not; it never rejects.  Does not\r\n     * set state immediately, but does set state asynchronously.\r\n     * \r\n     * @param index - the index of the event in this.state.events to add to the user's calendar\r\n     * @return {Promise<void>} a Promise that resolves when the task is done\r\n     */\r\n    addModelToCalendar(index: number): Promise<void> {\r\n        if (!this.props.calendarApi || !this.state.selectedCalendar) {\r\n            window.console.warn(\"Cannot add event to calendar: API not loaded or no selected calendar.\");\r\n            return Promise.resolve();\r\n        }\r\n        const event = this.state.events[index];\r\n        if (!event) {\r\n            console.warn(`Cannot add invalid event at index ${index} to calendar.`);\r\n            return Promise.resolve();\r\n        }\r\n        if (!event.getIsReadyToAdd()) {\r\n            return Promise.resolve();\r\n        }\r\n\r\n        return this.props.calendarApi.createEvent(this.state.selectedCalendar.id, event)\r\n            .then((htmlLink) => {\r\n                this.analytics.sendEvent({category: \"Calendar\", action: \"Event added\"});\r\n                if (event.isCourse) {\r\n                    this.analytics.sendEvent({category: \"Calendar\", action: \"Course added\"});\r\n                } else {\r\n                    this.analytics.sendEvent({category: \"Calendar\", action: \"Exam added\"});\r\n                }\r\n                this.updateOneEvent(\r\n                    {buttonState: EventInputButtonState.success, successUrl: htmlLink}, index\r\n                );\r\n            })\r\n            .catch(error => {\r\n                if (!(error instanceof ValidationError)) {\r\n                    window.console.error(error);\r\n                }\r\n                this.updateOneEvent({buttonState: EventInputButtonState.error, error: error}, index);\r\n            });\r\n    }\r\n\r\n    /**\r\n     * @return an array of table rows\r\n     */\r\n    renderEventTableRows(): JSX.Element[] {\r\n        return this.state.events.map((event, index) => (\r\n            <EventTableRow\r\n                key={index}\r\n                model={event}\r\n                onModelChangeRequested={propsToChange => this.updateOneEvent(propsToChange, index)}\r\n                onAddButtonPressed={() => this.addButtonPressed(index)}\r\n            />\r\n            )\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Renders the table and its options.\r\n     * \r\n     * @return {JSX.Element} the element to render\r\n     */\r\n    render(): JSX.Element {\r\n        let addAllButton;\r\n        if (this.state.isAddingAll) {\r\n            addAllButton = <button className=\"btn btn-light\" disabled={true}>Working...</button>;\r\n        } else if (this.state.events.length > 0) {\r\n            addAllButton = (\r\n                <button className=\"btn btn-primary\" onClick={this.addAllButtonPressed}>\r\n                    Add all to calendar\r\n                </button>\r\n            );\r\n        } else {\r\n            addAllButton = <button className=\"btn btn-primary\" disabled={true}>Nothing detected</button>;\r\n        }\r\n\r\n        return (\r\n        <div className=\"EventTable\">\r\n            <div className=\"EventTable-options-container\">\r\n                <p>\r\n                    Tip: you can go to <a href=\"https://www.google.com/calendar/\" target=\"_blank\" rel=\"noopener noreferrer\">www.google.com/calendar</a>,\r\n                    create a new calendar there, and then press \"Refresh list\"\r\n                </p>\r\n                <EventTableOptions\r\n                    calendarApi={this.props.calendarApi}\r\n                    selectedCalendar={this.state.selectedCalendar}\r\n                    onCalendarSelected={calendar => this.setState({selectedCalendar: calendar})}\r\n                />\r\n                <p>{addAllButton}</p>\r\n            </div>\r\n            <table className=\"table table-hover table-sm table-responsive\">\r\n                <thead>\r\n                    <tr>\r\n                        <td>Class or final name</td>\r\n                        <td>Days (MTWTFSS)</td>\r\n                        <td>Time (start - end)</td>\r\n                        <td>Location</td>\r\n                        <td>Add to calendar</td>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {this.renderEventTableRows()}\r\n                    <tr onClick={this.addCustomEvent}>\r\n                        <td colSpan={5}>\r\n                            <i className=\"fa fa-plus-circle EventTable-add-custom-event\" aria-hidden=\"true\" />\r\n                        </td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default EventTable;\r\n","import * as React from \"react\";\n\nimport AuthPanel from \"./AuthPanel\";\nimport ScheduleInput from \"./ScheduleInput\";\n\nimport Analytics from \"../Analytics\";\nimport CalendarApi from \"../CalendarApi\";\nimport CourseParser from \"../CourseParser\";\nimport ExamParser from \"../ExamParser\";\nimport EventTable from \"./EventTable\";\nimport EventInputModel from \"../EventInputModel\";\n\nimport \"./css/App.css\";\n\ninterface AppState {\n    calendarApi: CalendarApi | null;\n    isApiLoadError: boolean;\n    rawInputSchedule: string;\n}\n\n/**\n * The root component of everything dynamic in WebSTAC to Calendar.  Loads calendar API, parses user input, and keeps\n * track of what step the user is on. \n * \n * @author Silas Hsu\n */\nclass App extends React.Component<{}, AppState> {\n    analytics: Analytics;\n    courseParser: CourseParser;\n    examParser: ExamParser;\n    parsedEvents: EventInputModel[];\n\n    /**\n     * Not only initializes state and binds methods, but also initializes the calendar API.\n     * \n     * @param {object} props - empty\n     */\n    constructor(props: {}) {\n        super(props);\n        this.state = {\n            calendarApi: null,\n            isApiLoadError: false,\n            rawInputSchedule: \"\",\n        };\n        this.analytics = new Analytics();\n        this.courseParser = new CourseParser();\n        this.examParser = new ExamParser();\n        this.parsedEvents = [];\n\n        CalendarApi.getInstance()\n            .then(api => this.setState({calendarApi: api}))\n            .catch(error => {\n                window.console.error(error);\n                this.setState({isApiLoadError: true});\n            });\n\n        this.authStatusChanged = this.authStatusChanged.bind(this);\n        this.inputScheduleChanged = this.inputScheduleChanged.bind(this);\n    }\n\n    /**\n     * Sends a page view event to Analytics.\n     */\n    componentDidMount(): void {\n        this.analytics.sendPageView(\"/\");\n    }\n\n    /**\n     * Triggers a rerender.\n     */\n    authStatusChanged(): void {\n        this.setState({});\n    }\n\n    /**\n     * Parses the new schedule and sets state.\n     * \n     * @param {React.ChangeEvent<HTMLTextAreaElement>} event - the event trigged by the user input changing\n     */\n    inputScheduleChanged(event: React.ChangeEvent<HTMLTextAreaElement>): void {\n        let parsedCourses = this.courseParser.parseCourses(event.target.value);\n        let parsedExams = this.examParser.parseExams(event.target.value, parsedCourses);\n        this.parsedEvents = parsedCourses.concat(parsedExams);\n        if (this.parsedEvents.length > 0) {\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Success\",\n            });\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Courses parsed\",\n                value: parsedCourses.length\n            });\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Exams parsed\",\n                value: parsedExams.length\n            });\n        } else {\n            this.analytics.sendEvent({\n                category: \"Schedule Parse\",\n                action: \"Failure\",\n            });\n        }\n        this.setState({rawInputSchedule: event.target.value});\n    }\n\n    /**\n     * @return {JSX.Element} the component to render\n     */\n    render(): JSX.Element {\n        const stepClassName = \"App-step\";\n        const activeStepClassName = \"App-step App-step-active\";\n        let activeStep;\n        if (!this.state.calendarApi || !this.state.calendarApi.getIsSignedIn()) {\n            activeStep = 1;\n        } else if (this.parsedEvents.length === 0) {\n            activeStep = 2;\n        } else {\n            activeStep = 3;\n        }\n\n        let authPanel = null;\n        if (this.state.isApiLoadError) {\n            authPanel = (\n            <div className=\"alert alert-danger App-api-load-failed\">\n                <h4>Failed to load Calendar API.</h4>\n                {/* eslint-disable-next-line jsx-a11y/anchor-is-valid */}\n                Try <a href=\"\">reloading the page</a>.  If that doesn't work, either Google is down (very bad), or there\n                is a serious bug within this app (also very bad).\n            </div>\n            );\n        } else if (this.state.calendarApi) {\n            authPanel = (\n            <AuthPanel\n                isSignedIn={this.state.calendarApi.getIsSignedIn()}\n                onSignInRequested={this.state.calendarApi.signIn}\n                onSignOutRequested={this.state.calendarApi.signOut}\n                onAuthChangeComplete={this.authStatusChanged}\n            />\n            );\n        } else {\n            authPanel = <p>Loading...</p>;\n        }\n\n        return (\n        <div className=\"App\">\n            <div className={activeStep === 1 ? activeStepClassName : stepClassName}>\n                <h3 className=\"App-heading\">① Permission</h3>\n                {authPanel}\n            </div>\n            <div className={activeStep === 2 ? activeStepClassName : stepClassName}>\n                <h3 className=\"App-heading\">② CopyPaste</h3>\n                <ScheduleInput\n                    value={this.state.rawInputSchedule}\n                    onChange={this.inputScheduleChanged}\n                    numEventsParsed={this.parsedEvents.length}\n                />\n            </div>\n            <div className={activeStep === 3 ? activeStepClassName : stepClassName}>\n                <h3 className=\"App-heading\">③ Confirm</h3>\n                <EventTable calendarApi={this.state.calendarApi || undefined} events={this.parsedEvents} />\n            </div>\n        </div>\n        );\n    }\n}\n\nexport default App;\n","/**\n * Entry point for everything dynamic in WebSTAC to Calendar.\n * \n * @author Silas Hsu\n */\nimport * as React from \"react\";\nimport * as ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n// import registerServiceWorker from \"./registerServiceWorker\";\n\n/**\n * Gets whether the current browser is Internet Explorer.  Thanks to StackOverflow for this code!\n * http://stackoverflow.com/questions/19999388/jquery-check-if-user-is-using-ie\n * \n * @return {boolean} whether the current browser is Internet Explorer\n */\nfunction isInternetExplorer() {\n    var ua = window.navigator.userAgent;\n    var msie = ua.indexOf(\"MSIE \");\n    var trident = ua.indexOf(\"Trident/\");\n    if (msie > 0) {\n        // IE 10 or older => return version number\n        // return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);\n        return true;\n    }\n    if (trident > 0) {\n        // IE 11 (or newer) => return version number\n        // var rv = ua.indexOf('rv:');\n        // return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);\n        return true;\n    }\n    // Other browser\n    return false;\n}\n\n/**\n * Checks that the browser is supported, and if so, creates the app root component.\n */\nwindow.onload = () => {\n    const appRootContainer = document.getElementById(\"root\") as HTMLElement;\n    if (isInternetExplorer()) {\n        const alert = (\n            <div style={{textAlign: \"center\"}} >\n                <div className=\"alert alert-danger\" style={{display: \"inline-block\"}} >\n                    <h4><Frown /> Internet Explorer not supported. <Frown /></h4>\n                    You appear to be using Internet Explorer.  WebSTAC to Calendar does not support IE.  Sorry about\n                    that.\n                </div>\n            </div>\n        );\n        ReactDOM.render(alert, appRootContainer);\n    } else {\n        ReactDOM.render(<App />, appRootContainer);\n    }\n};\n// registerServiceWorker();\n\nfunction Frown() {\n    return <span role=\"img\" aria-label=\"Frown\">🙁</span>;\n}\n"],"sourceRoot":""}